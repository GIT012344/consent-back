const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'postgres',
  password: '4321',
  database: 'consent'
});

async function checkUserTypeIssue() {
  const client = await pool.connect();
  
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ User Type ‡πÉ‡∏ô Consent Records\n');
    console.log('='.repeat(80));
    
    // 1. ‡∏î‡∏π consent records ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    console.log('1. Consent Records ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n');
    const records = await client.query(`
      SELECT id, name_surname, id_passport, user_type, consent_version, 
             language, created_at
      FROM consent_records
      WHERE is_active = true
      ORDER BY created_at DESC
      LIMIT 10
    `);
    
    if (records.rows.length === 0) {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö consent records');
    } else {
      records.rows.forEach(r => {
        console.log(`ID ${r.id}: ${r.name_surname}`);
        console.log(`   User Type: "${r.user_type}" (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô custom type ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á)`);
        console.log(`   ID/Passport: ${r.id_passport}`);
        console.log(`   Version: ${r.consent_version}`);
        console.log(`   Created: ${new Date(r.created_at).toLocaleString('th-TH')}`);
        console.log('');
      });
    }
    
    // 2. ‡∏î‡∏π policy versions ‡∏ó‡∏µ‡πà‡∏°‡∏µ custom user types
    console.log('2. Policy Versions with Custom User Types:\n');
    const policies = await client.query(`
      SELECT DISTINCT user_type, COUNT(*) as count
      FROM policy_versions
      WHERE is_active = true
      GROUP BY user_type
      ORDER BY user_type
    `);
    
    policies.rows.forEach(p => {
      console.log(`   ${p.user_type}: ${p.count} policies`);
    });
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö consent records ‡∏ó‡∏µ‡πà user_type ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö policy
    console.log('\n3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á:\n');
    const mismatch = await client.query(`
      SELECT cr.id, cr.name_surname, cr.user_type as record_type,
             pv.user_type as policy_type, pv.title
      FROM consent_records cr
      LEFT JOIN policy_versions pv ON pv.version = cr.consent_version
      WHERE cr.is_active = true
      ORDER BY cr.created_at DESC
      LIMIT 5
    `);
    
    if (mismatch.rows.length > 0) {
      mismatch.rows.forEach(m => {
        console.log(`Record ID ${m.id}: ${m.name_surname}`);
        console.log(`   Record User Type: "${m.record_type}"`);
        console.log(`   Policy User Type: "${m.policy_type}"`);
        if (m.record_type !== m.policy_type) {
          console.log(`   ‚ö†Ô∏è User Type ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô!`);
        }
        console.log('');
      });
    }
    
    console.log('='.repeat(80));
    console.log('\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:\n');
    console.log('‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏∑‡∏≠: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Policy ‡∏î‡πâ‡∏ß‡∏¢ custom user type (‡πÄ‡∏ä‡πà‡∏ô "‡πÑ‡∏ó‡∏•")');
    console.log('‡πÅ‡∏ï‡πà‡∏ï‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å consent ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô "customer" ‡πÅ‡∏ó‡∏ô');
    console.log('\n‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:');
    console.log('1. ConsentFlowPage.js - ‡∏ï‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ API');
    console.log('2. Backend /api/consent/submit - ‡∏ï‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å user_type');
    console.log('3. URL parameter ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á user type ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

checkUserTypeIssue();
