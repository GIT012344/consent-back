const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'postgres',
  password: '4321',
  database: 'consent'
});

async function cleanAndTestPolicies() {
  const client = await pool.connect();
  
  try {
    console.log('üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Policy\n');
    console.log('='.repeat(50));
    
    // 1. ‡∏•‡∏ö policies ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô - ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    console.log('\n1. ‡∏•‡∏ö policies ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥:');
    await client.query(`
      DELETE FROM policy_versions
      WHERE id NOT IN (
        SELECT MAX(id)
        FROM policy_versions
        GROUP BY user_type, language, title
      )
    `);
    console.log('   ‚úÖ ‡∏•‡∏ö duplicates ‡πÅ‡∏•‡πâ‡∏ß');
    
    // 2. ‡πÅ‡∏™‡∏î‡∏á policies ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    console.log('\n2. Policies ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:');
    const existing = await client.query(`
      SELECT id, user_type, language, title, is_active
      FROM policy_versions
      ORDER BY user_type, language, title
    `);
    
    if (existing.rows.length === 0) {
      console.log('   ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ policy ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } else {
      existing.rows.forEach(p => {
        const status = p.is_active ? '‚úÖ' : '‚ùå';
        console.log(`   ${status} ID ${p.id}: ${p.user_type}/${p.language} = "${p.title}"`);
      });
    }
    
    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á policy ‡πÉ‡∏´‡∏°‡πà
    console.log('\n3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó policies:');
    
    const testPolicies = [
      { title: '001', user_type: 'customer', language: 'th', content: '<p>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢</p>' },
      { title: '002', user_type: 'customer', language: 'en', content: '<p>Customer Policy English</p>' },
      { title: '003', user_type: 'employee', language: 'th', content: '<p>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢</p>' }
    ];
    
    for (const policy of testPolicies) {
      // Check if exists
      const check = await client.query(
        `SELECT id FROM policy_versions 
         WHERE title = $1 AND user_type = $2 AND language = $3`,
        [policy.title, policy.user_type, policy.language]
      );
      
      if (check.rows.length > 0) {
        // Update existing
        await client.query(
          `UPDATE policy_versions 
           SET content = $1, is_active = true, updated_at = NOW()
           WHERE id = $2`,
          [policy.content, check.rows[0].id]
        );
        console.log(`   ‚úÖ Updated ${policy.title} (${policy.user_type}/${policy.language})`);
      } else {
        // Create new
        await client.query(
          `INSERT INTO policy_versions (title, user_type, language, content, version, is_active)
           VALUES ($1, $2, $3, $4, '1.0', true)`,
          [policy.title, policy.user_type, policy.language, policy.content]
        );
        console.log(`   ‚úÖ Created ${policy.title} (${policy.user_type}/${policy.language})`);
      }
    }
    
    // 4. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    console.log('\n4. ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:');
    const final = await client.query(`
      SELECT user_type, language, title
      FROM policy_versions
      WHERE is_active = true
      ORDER BY user_type, language
    `);
    
    final.rows.forEach(p => {
      console.log(`   ‚úÖ ${p.user_type}/${p.language}: "${p.title}"`);
    });
    
    console.log('\n' + '='.repeat(50));
    console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!\n');
    console.log('‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log('‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏ó‡∏¢: http://localhost:5000/consent/customer?lang=th ‚Üí 001');
    console.log('‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©: http://localhost:5000/consent/customer?lang=en ‚Üí 002');
    console.log('‚Ä¢ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏ó‡∏¢: http://localhost:5000/consent/employee?lang=th ‚Üí 003');
    console.log('\n‡∏™‡∏£‡πâ‡∏≤‡∏á Policy ‡πÉ‡∏´‡∏°‡πà: http://localhost:5000/admin/create-policy');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

cleanAndTestPolicies();
