# ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Frontend Developer

## üöÄ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Backend

### 1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Dependencies
```bash
npm install
```

### 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Database (PostgreSQL)
- ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PostgreSQL ‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
- ‡∏™‡∏£‡πâ‡∏≤‡∏á database ‡∏ä‡∏∑‡πà‡∏≠ "consent"
- Username: postgres, Password: 4321, Port: 5432

### 3. ‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
```bash
# Development mode (auto-restart)
npm run dev

# ‡∏´‡∏£‡∏∑‡∏≠ Production mode
npm start
```

‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡πà: http://localhost:3000

---

## üìã API Endpoints ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Frontend

### Base URL
```
http://localhost:3000/api
```

### 1. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°
```javascript
POST /api/consent/submit

// Request Body:
{
  "title": "‡∏ô‡∏≤‡∏¢",           // ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ô‡∏≤‡∏á", "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß", "Mr.", "Mrs.", "Miss", "Ms."
  "nameSurname": "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ",
  "idPassport": "1234567890123",
  "language": "th",        // "th" ‡∏´‡∏£‡∏∑‡∏≠ "en"
  "consentType": "customer" // "customer", "employee", "partner"
}

// Response (‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à):
{
  "success": true,
  "message": "Consent submitted successfully",
  "data": {
    "id": 1,
    "submissionId": "uuid-here",
    "record": { ... }
  }
}

// Response (‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß):
{
  "success": false,
  "message": "Consent already exists for this ID/Passport number",
  "existingRecord": {
    "id": 1,
    "submittedDate": "2024-01-15T10:30:00.000Z"
  }
}
```

### 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
```javascript
GET /api/consent/check/1234567890123

// Response (‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•):
{
  "success": true,
  "message": "Consent record found",
  "data": {
    "id": 1,
    "title": "‡∏ô‡∏≤‡∏¢",
    "name_surname": "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ",
    "created_date": "2024-01-15T10:30:00.000Z",
    "consent_language": "th",
    "consent_type": "customer"
  }
}

// Response (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•):
{
  "success": false,
  "message": "No consent record found for this ID/Passport number"
}
```

### 3. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
```javascript
GET /api/consent/list?page=1&limit=10&search=‡∏™‡∏°‡∏ä‡∏≤‡∏¢&type=customer&language=th&startDate=2024-01-01&endDate=2024-12-31

// Response:
{
  "success": true,
  "data": {
    "records": [...],
    "pagination": {
      "currentPage": 1,
      "totalPages": 5,
      "totalRecords": 50,
      "recordsPerPage": 10,
      "hasNextPage": true,
      "hasPrevPage": false
    }
  }
}
```

### 4. ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
```javascript
GET /api/consent/stats

// Response:
{
  "success": true,
  "data": {
    "total": 100,
    "byType": [
      {"consent_type": "customer", "count": "80"},
      {"consent_type": "employee", "count": "20"}
    ],
    "byLanguage": [
      {"consent_language": "th", "count": "70"},
      {"consent_language": "en", "count": "30"}
    ],
    "byDate": [...]
  }
}
```

### 5. Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
```javascript
// Export Excel
GET /api/export/excel?startDate=2024-01-01&endDate=2024-12-31
// ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÑ‡∏ü‡∏•‡πå Excel download

// Export CSV
GET /api/export/csv?startDate=2024-01-01&endDate=2024-12-31
// ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÑ‡∏ü‡∏•‡πå CSV download

// Export Summary
GET /api/export/summary
// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export
```

---

## üé® Frontend Implementation Guide

### 1. Form Validation
```javascript
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
const validateForm = (data) => {
  const errors = [];
  
  if (!data.title) errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤');
  if (!data.nameSurname || data.nameSurname.length < 2) {
    errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)');
  }
  if (!data.idPassport || data.idPassport.length < 8) {
    errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô/Passport (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)');
  }
  
  return errors;
};
```

### 2. API Call Example (JavaScript/Fetch)
```javascript
// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°
const submitConsent = async (formData) => {
  try {
    const response = await fetch('http://localhost:3000/api/consent/submit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(formData)
    });
    
    const result = await response.json();
    
    if (result.success) {
      alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      // redirect ‡∏´‡∏£‡∏∑‡∏≠ show success message
    } else {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message);
      // show error message
    }
  } catch (error) {
    console.error('Error:', error);
    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
  }
};

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
const checkExistingConsent = async (idPassport) => {
  try {
    const response = await fetch(`http://localhost:3000/api/consent/check/${idPassport}`);
    const result = await response.json();
    
    if (result.success) {
      // ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      return result.data;
    } else {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ
      return null;
    }
  } catch (error) {
    console.error('Error checking consent:', error);
    return null;
  }
};
```

### 3. React Example
```jsx
import React, { useState } from 'react';

const ConsentForm = () => {
  const [formData, setFormData] = useState({
    title: '',
    nameSurname: '',
    idPassport: '',
    language: 'th',
    consentType: 'customer'
  });
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô
      const existing = await checkExistingConsent(formData.idPassport);
      if (existing) {
        setMessage('‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠: ' + new Date(existing.created_date).toLocaleDateString('th-TH'));
        setLoading(false);
        return;
      }
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const response = await fetch('http://localhost:3000/api/consent/submit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });
      
      const result = await response.json();
      
      if (result.success) {
        setMessage('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        // Reset form ‡∏´‡∏£‡∏∑‡∏≠ redirect
      } else {
        setMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message);
      }
    } catch (error) {
      setMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      {/* Form fields here */}
      <button type="submit" disabled={loading}>
        {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°'}
      </button>
      {message && <div className="message">{message}</div>}
    </form>
  );
};
```

---

## üîí Security Notes

1. **CORS**: Backend ‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS ‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö localhost:3000, 3001
2. **Rate Limiting**: ‡∏à‡∏≥‡∏Å‡∏±‡∏î 100 requests ‡∏ï‡πà‡∏≠ 15 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ï‡πà‡∏≠ IP
3. **Input Validation**: Backend ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
4. **SQL Injection Protection**: ‡πÉ‡∏ä‡πâ Parameterized queries

---

## üêõ Troubleshooting

### ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏à‡∏≠:

1. **Database Connection Error**
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PostgreSQL ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username/password ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env

2. **CORS Error**
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏Ç‡∏≠‡∏á Frontend ‡πÉ‡∏ô server.js
   - ‡πÉ‡∏ä‡πâ http://localhost:3000 ‡∏´‡∏£‡∏∑‡∏≠ 3001

3. **Port Already in Use**
   - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô PORT ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env
   - ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ port 3000

---

## üìû Contact

‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏° Backend ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!

**Backend API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß! üéâ**