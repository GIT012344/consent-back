const axios = require('axios');

const API_URL = 'http://localhost:3000';

async function verifySystemFlow() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Flow ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n');
  console.log('='.repeat(50));
  
  const results = {
    passed: [],
    failed: []
  };
  
  // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Endpoints ‡∏´‡∏•‡∏±‡∏Å
  console.log('\nüìã 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Endpoints:');
  
  const endpoints = [
    { method: 'GET', path: '/api/titles', name: 'Titles API' },
    { method: 'GET', path: '/api/form-fields', name: 'Form Fields API' },
    { method: 'GET', path: '/api/admin/dashboard/stats', name: 'Dashboard Stats' },
    { method: 'GET', path: '/api/admin/dashboard/recent?limit=5', name: 'Recent Consents' },
    { method: 'POST', path: '/api/consent', name: 'Submit Consent', 
      data: {
        name: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        surname: '‡∏£‡∏∞‡∏ö‡∏ö',
        nameSurname: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö',
        idPassport: '9999999999999',
        userType: 'customer',
        consentVersion: '1.0.0',
        language: 'th',
        consentGiven: true,
        consentDate: new Date().toISOString()
      }
    }
  ];
  
  for (const endpoint of endpoints) {
    try {
      const config = {
        method: endpoint.method,
        url: `${API_URL}${endpoint.path}`
      };
      
      if (endpoint.data) {
        config.data = endpoint.data;
      }
      
      const response = await axios(config);
      console.log(`   ‚úÖ ${endpoint.name}: OK`);
      results.passed.push(endpoint.name);
    } catch (error) {
      const status = error.response?.status || 'Network Error';
      const message = error.response?.data?.error || error.message;
      console.log(`   ‚ùå ${endpoint.name}: ${status} - ${message}`);
      results.failed.push(`${endpoint.name}: ${message}`);
    }
  }
  
  // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö User Types ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  console.log('\nüìã 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö User Types:');
  
  const userTypes = ['customer', 'employee', 'partner'];
  
  for (const userType of userTypes) {
    try {
      const testData = {
        name: `Test${userType}`,
        surname: userType,
        nameSurname: `Test${userType} ${userType}`,
        idPassport: `${userType}${Date.now()}`.substring(0, 13),
        userType: userType,
        consentVersion: '1.0.0',
        language: 'th',
        consentGiven: true,
        consentDate: new Date().toISOString()
      };
      
      const response = await axios.post(`${API_URL}/api/consent`, testData);
      
      if (response.data.success) {
        console.log(`   ‚úÖ ${userType}: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ`);
        results.passed.push(`UserType: ${userType}`);
      }
    } catch (error) {
      const message = error.response?.data?.message || error.message;
      console.log(`   ‚ùå ${userType}: ${message}`);
      results.failed.push(`UserType ${userType}: ${message}`);
    }
  }
  
  // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Database Tables
  console.log('\nüìã 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Database:');
  
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö structure
    const response = await axios.get(`${API_URL}/api/admin/dashboard/recent?limit=1`);
    
    if (response.data.data.consents.length > 0) {
      const record = response.data.data.consents[0];
      const fields = Object.keys(record);
      
      console.log(`   ‚úÖ consent_records table ‡∏°‡∏µ ${fields.length} fields`);
      console.log(`   Fields: ${fields.join(', ')}`);
      results.passed.push('Database Structure');
    }
  } catch (error) {
    console.log(`   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö database: ${error.message}`);
    results.failed.push(`Database: ${error.message}`);
  }
  
  // 4. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
  console.log('\n' + '='.repeat(50));
  console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:\n');
  
  console.log(`‚úÖ ‡∏ú‡πà‡∏≤‡∏ô: ${results.passed.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  if (results.passed.length > 0) {
    results.passed.forEach(item => console.log(`   - ${item}`));
  }
  
  if (results.failed.length > 0) {
    console.log(`\n‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô: ${results.failed.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    results.failed.forEach(item => console.log(`   - ${item}`));
  }
  
  // 5. ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
  console.log('\nüí° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:');
  if (results.failed.length === 0) {
    console.log('   ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!');
  } else {
    console.log('   ‚ö†Ô∏è ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
    console.log('   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ backend server ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà port 3000');
    console.log('   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database');
  }
  
  console.log('\nüìù Tables ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á:');
  console.log('   1. consent_records - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• consent ‡∏´‡∏•‡∏±‡∏Å');
  console.log('   2. consent_history - ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á');
  console.log('\n   ‚ùå Tables ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ');
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
verifySystemFlow().catch(console.error);
