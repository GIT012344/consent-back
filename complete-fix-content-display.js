const { Pool } = require('pg');
const axios = require('axios');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'postgres',
  password: '4321',
  database: 'consent'
});

async function completeFixContentDisplay() {
  const client = await pool.connect();
  
  try {
    console.log('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n');
    console.log('='.repeat(80));
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('üìä STEP 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n');
    const dbCheck = await client.query(`
      SELECT id, user_type, language, title, 
             LEFT(content, 200) as content_preview,
             is_active, created_at, updated_at
      FROM policy_versions
      WHERE is_active = true
      ORDER BY user_type, language
    `);
    
    console.log(`‡∏û‡∏ö ${dbCheck.rows.length} policies ‡∏ó‡∏µ‡πà active:\n`);
    dbCheck.rows.forEach(p => {
      console.log(`ID ${p.id}: ${p.user_type}/${p.language} = "${p.title}"`);
      console.log(`Content: ${p.content_preview}...`);
      console.log(`Created: ${new Date(p.created_at).toLocaleString('th-TH')}`);
      console.log('');
    });
    
    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backend API
    console.log('='.repeat(80));
    console.log('\nüîå STEP 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backend API\n');
    
    const apiTests = [
      { userType: 'customer', language: 'th', expected: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏ó‡∏¢' },
      { userType: 'customer', language: 'en', expected: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©' },
      { userType: 'employee', language: 'th', expected: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏ó‡∏¢' }
    ];
    
    for (const test of apiTests) {
      const url = `http://localhost:3000/api/simple-policy/active?userType=${test.userType}&language=${test.language}`;
      console.log(`Testing ${test.expected}: ${url}`);
      
      try {
        const response = await axios.get(url);
        if (response.data.success && response.data.data) {
          const data = response.data.data;
          console.log(`‚úÖ API Response:`);
          console.log(`   Title: "${data.title}"`);
          console.log(`   User Type: ${data.user_type}`);
          console.log(`   Language: ${data.language}`);
          console.log(`   Content (first 100 chars): ${data.content?.substring(0, 100)}...`);
        } else {
          console.log(`‚ùå No data returned from API`);
        }
      } catch (error) {
        console.log(`‚ùå API Error: ${error.message}`);
      }
      console.log('');
    }
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ mapping
    console.log('='.repeat(80));
    console.log('\nüîç STEP 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Mapping\n');
    
    const mappingCheck = await client.query(`
      SELECT user_type, language, title, id
      FROM policy_versions
      WHERE is_active = true
      ORDER BY user_type, language
    `);
    
    console.log('‡∏Å‡∏≤‡∏£ Mapping ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
    mappingCheck.rows.forEach(m => {
      const langText = m.language === 'th' ? '‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢' : 'English';
      console.log(`${m.user_type}/${m.language} (${langText}) ‚Üí Title: "${m.title}" (ID: ${m.id})`);
    });
    
    // 4. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    console.log('\n='.repeat(80));
    console.log('\nüõ†Ô∏è STEP 4: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤\n');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ duplicate ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const duplicates = await client.query(`
      SELECT user_type, language, COUNT(*) as count
      FROM policy_versions
      WHERE is_active = true
      GROUP BY user_type, language
      HAVING COUNT(*) > 1
    `);
    
    if (duplicates.rows.length > 0) {
      console.log('‚ö†Ô∏è ‡∏û‡∏ö duplicate policies - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...');
      
      // Keep only the latest one for each user_type/language
      await client.query(`
        UPDATE policy_versions
        SET is_active = false
        WHERE id NOT IN (
          SELECT DISTINCT ON (user_type, language) id
          FROM policy_versions
          WHERE is_active = true
          ORDER BY user_type, language, updated_at DESC NULLS LAST, created_at DESC
        )
      `);
      
      console.log('‚úÖ ‡∏•‡∏ö duplicates ‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö duplicate policies');
    }
    
    // 5. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ
    console.log('\n='.repeat(80));
    console.log('\n‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:\n');
    
    const finalCheck = await client.query(`
      SELECT user_type, language, title
      FROM policy_versions
      WHERE is_active = true
      ORDER BY user_type, language
    `);
    
    console.log('Policies ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
    finalCheck.rows.forEach(p => {
      console.log(`‚Ä¢ ${p.user_type}/${p.language}: "${p.title}"`);
    });
    
    console.log('\nüìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Policy:');
    console.log('1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:5000/admin/create-policy');
    console.log('2. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    console.log('   - Title: ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£');
    console.log('   - User Type: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å customer/employee/partner');
    console.log('   - Language: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å th-TH ‡∏´‡∏£‡∏∑‡∏≠ en-US');
    console.log('   - Content: ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£');
    console.log('3. ‡∏Å‡∏î Save (‡∏ñ‡πâ‡∏≤ title ‡∏ã‡πâ‡∏≥‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)');
    
    console.log('\nüîó ‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log('‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏ó‡∏¢: http://localhost:5000/consent/customer?lang=th');
    console.log('‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©: http://localhost:5000/consent/customer?lang=en');
    console.log('‚Ä¢ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏ó‡∏¢: http://localhost:5000/consent/employee?lang=th');
    
    console.log('\n‚ö†Ô∏è ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà:');
    console.log('1. Restart Backend: ‡∏õ‡∏¥‡∏î terminal ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô node server.js ‡πÉ‡∏´‡∏°‡πà');
    console.log('2. Clear Browser Cache: ‡∏Å‡∏î Ctrl+F5');
    console.log('3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Console (F12) ‡∏î‡∏π error');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

completeFixContentDisplay();
