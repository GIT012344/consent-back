const { Client } = require('pg');

async function directCleanup() {
  const client = new Client({
    host: 'localhost',
    port: 5432,
    database: 'consent',
    user: 'postgres',
    password: '4321'
  });

  try {
    await client.connect();
    console.log('üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n');

    // 1. ‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    console.log('üìã ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á consent_records ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
    console.log('=========================================');
    
    const columns = await client.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'consent_records' 
      ORDER BY ordinal_position
    `);
    
    columns.rows.forEach((col, i) => {
      console.log(`${i+1}. ${col.column_name} (${col.data_type})`);
    });

    // 2. ‡∏•‡∏ö columns ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    console.log('\nüßπ ‡∏•‡∏ö columns ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô/‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:');
    
    const dropList = [
      'uid',           // ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö consent_id ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      'first_name',    // ‡πÉ‡∏ä‡πâ name_surname ‡πÅ‡∏ó‡∏ô
      'last_name',     // ‡πÉ‡∏ä‡πâ name_surname ‡πÅ‡∏ó‡∏ô
      'id_type',       // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      'id_number',     // ‡πÉ‡∏ä‡πâ id_passport ‡πÅ‡∏ó‡∏ô
      'snapshot_html', // ‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
      'created_at'     // ‡πÉ‡∏ä‡πâ created_date + created_time ‡πÅ‡∏ó‡∏ô
    ];

    for (const col of dropList) {
      try {
        await client.query(`ALTER TABLE consent_records DROP COLUMN IF EXISTS ${col}`);
        console.log(`  ‚úì ‡∏•‡∏ö ${col}`);
      } catch (e) {
        console.log(`  ‚ö†Ô∏è ${col}: ${e.message}`);
      }
    }

    // 3. ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î
    console.log('\n‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:');
    
    try {
      await client.query(`
        ALTER TABLE consent_records 
        ADD COLUMN IF NOT EXISTS consent_id VARCHAR(50),
        ADD COLUMN IF NOT EXISTS consent_type VARCHAR(50) DEFAULT 'customer',
        ADD COLUMN IF NOT EXISTS policy_title VARCHAR(255),
        ADD COLUMN IF NOT EXISTS user_agent TEXT,
        ADD COLUMN IF NOT EXISTS created_time TIME DEFAULT CURRENT_TIME
      `);
      console.log('  ‚úì ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (e) {
      console.log(`  ‚ö†Ô∏è ${e.message}`);
    }

    // 4. ‡∏õ‡∏£‡∏±‡∏ö data types
    console.log('\nüîß ‡∏õ‡∏£‡∏±‡∏ö data types:');
    
    try {
      await client.query('ALTER TABLE consent_records ALTER COLUMN browser_info TYPE TEXT');
      console.log('  ‚úì browser_info -> TEXT');
    } catch (e) {
      console.log(`  ‚ö†Ô∏è browser_info: ${e.message}`);
    }

    // 5. ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    console.log('\n‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î:');
    console.log('=====================================');
    
    const newColumns = await client.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'consent_records' 
      ORDER BY ordinal_position
    `);
    
    newColumns.rows.forEach((col, i) => {
      console.log(`${i+1}. ${col.column_name} (${col.data_type})`);
    });

    // 6. ‡∏™‡∏£‡∏∏‡∏õ
    const count = await client.query('SELECT COUNT(*) FROM consent_records');
    console.log(`\nüìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ${count.rows[0].count} records`);
    
    console.log('\n‚ú® ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Database ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await client.end();
  }
}

directCleanup();
