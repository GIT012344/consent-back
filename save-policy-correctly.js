const { Pool } = require('pg');
const axios = require('axios');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'postgres',
  password: '4321',
  database: 'consent'
});

async function savePolicyCorrectly() {
  const client = await pool.connect();
  
  try {
    console.log('üîß ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Policy ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà Admin ‡∏™‡∏£‡πâ‡∏≤‡∏á\n');
    console.log('='.repeat(80));
    
    // ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏°‡∏≤
    const adminContent = `<p>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏´‡∏≤‡∏°</p>
<p>‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡∏≤‡∏ú‡∏≤</p>
<p>‡∏≠‡∏≥‡∏û‡∏•‡∏™‡∏ô‡∏∏‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≠‡∏°‡∏û‡πÉ‡∏à</p>`;
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ policy ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    console.log('1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Policy ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:\n');
    const existing = await client.query(`
      SELECT id, title, user_type, language 
      FROM policy_versions
      WHERE user_type = 'customer' AND language = 'th'
    `);
    
    if (existing.rows.length > 0) {
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
      await client.query(`
        UPDATE policy_versions 
        SET title = '001', 
            content = $1, 
            version = '1.0.0',
            is_active = true,
            updated_at = NOW()
        WHERE user_type = 'customer' AND language = 'th'
      `, [adminContent]);
      console.log(`‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Policy ID ${existing.rows[0].id}`);
    } else {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      const result = await client.query(`
        INSERT INTO policy_versions (
          title, user_type, language, version, content, is_active
        ) VALUES (
          '001', 'customer', 'th', '1.0.0', $1, true
        ) RETURNING id
      `, [adminContent]);
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Policy ‡πÉ‡∏´‡∏°‡πà ID ${result.rows[0].id}`);
    }
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\n2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:\n');
    const verify = await client.query(`
      SELECT title, content 
      FROM policy_versions
      WHERE user_type = 'customer' AND language = 'th' AND is_active = true
    `);
    
    if (verify.rows.length > 0) {
      console.log(`Title: "${verify.rows[0].title}"`);
      console.log('Content:');
      console.log('-'.repeat(60));
      console.log(verify.rows[0].content);
      console.log('-'.repeat(60));
    }
    
    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API
    console.log('\n3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API:\n');
    try {
      const res = await axios.get('http://localhost:3000/api/simple-policy/active?userType=customer&language=th');
      if (res.data.success) {
        console.log('‚úÖ API ‡∏û‡∏ö Policy');
        console.log(`Title: ${res.data.data.title}`);
      } else {
        console.log('‚ùå API ‡πÑ‡∏°‡πà‡∏û‡∏ö Policy');
      }
    } catch (err) {
      console.log('‚ö†Ô∏è API Error - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ backend ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà');
    }
    
    console.log('\n‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
    console.log('\n‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà: http://localhost:5000/consent/customer?lang=th');
    console.log('‡∏Å‡∏î Ctrl+F5 ‡πÄ‡∏û‡∏∑‡πà‡∏≠ refresh');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

savePolicyCorrectly();
