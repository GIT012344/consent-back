const { Pool } = require('pg');
const axios = require('axios');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'consent',
  user: 'postgres',
  password: '4321'
});

async function checkAndFixEverything() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...\n');
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö policies ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    console.log('üìã STEP 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Policies ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    console.log('=========================================');
    
    const existing = await pool.query(`
      SELECT id, user_type, language, title, version,
             LEFT(content, 100) as content_preview
      FROM policy_versions
      ORDER BY user_type, language
    `);
    
    console.log('Policies ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:');
    existing.rows.forEach(p => {
      console.log(`[${p.id}] ${p.user_type} | ${p.language} | ${p.title}`);
    });
    
    // 2. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    console.log('\nüìã STEP 2: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà');
    console.log('====================================');
    
    await pool.query('DELETE FROM policy_versions');
    console.log('‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß');
    
    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á policies ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const policies = [
      // Customer Thai - ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ó‡∏¢
      {
        version: '1.0.0',
        title: '‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)',
        content: `<h2>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h2>
<p>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤</p>
<p><br></p>
<p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏Å‡πá‡∏ö:</p>
<ul>
<li>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</li>
<li>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</li>
<li>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</li>
</ul>`,
        language: 'th-TH',
        user_type: 'customer'
      },
      
      // Customer English - ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
      {
        version: '1.0.0',
        title: 'Privacy Policy (English)',
        content: `<h2>Privacy Policy</h2>
<p>Welcome to our service</p>
<p><br></p>
<p>Information we collect:</p>
<ul>
<li>Full Name</li>
<li>ID/Passport</li>
<li>Address</li>
</ul>`,
        language: 'en-US',
        user_type: 'customer'
      },
      
      // Employee - ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡∏£‡∏á)
      {
        version: '1.0.0',
        title: '‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
        content: `<h2>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</h2>
<p>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó</p>
<ul>
<li>‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</li>
<li>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</li>
</ul>`,
        language: 'th-TH',
        user_type: 'employee'
      },
      
      // Partner - ‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£ (‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡∏£‡∏á)
      {
        version: '1.0.0',
        title: '‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£',
        content: `<h2>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£</h2>
<p>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à</p>
<ul>
<li>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó</li>
<li>‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</li>
</ul>`,
        language: 'th-TH',
        user_type: 'partner'
      }
    ];
    
    for (const policy of policies) {
      const result = await pool.query(
        `INSERT INTO policy_versions 
         (version, title, content, language, user_type, is_active, effective_date) 
         VALUES ($1, $2, $3, $4, $5, true, NOW())
         RETURNING id`,
        [policy.version, policy.title, policy.content, policy.language, policy.user_type]
      );
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á: ${policy.user_type} - ${policy.language} (ID: ${result.rows[0].id})`);
    }
    
    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API
    console.log('\nüìã STEP 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Endpoints');
    console.log('================================');
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö customer Thai
    try {
      const res = await axios.get('http://localhost:3000/api/simple-policy/active?userType=customer&language=th-TH');
      if (res.data.success && res.data.data) {
        console.log(`‚úÖ Customer Thai: "${res.data.data.title}"`);
      } else {
        console.log('‚ùå Customer Thai: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } catch (e) {
      console.log('‚ùå Customer Thai API Error:', e.message);
    }
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö customer English
    try {
      const res = await axios.get('http://localhost:3000/api/simple-policy/active?userType=customer&language=en-US');
      if (res.data.success && res.data.data) {
        console.log(`‚úÖ Customer English: "${res.data.data.title}"`);
      } else {
        console.log('‚ùå Customer English: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } catch (e) {
      console.log('‚ùå Customer English API Error:', e.message);
    }
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö employee
    try {
      const res = await axios.get('http://localhost:3000/api/simple-policy/active?userType=employee&language=th-TH');
      if (res.data.success && res.data.data) {
        console.log(`‚úÖ Employee Thai: "${res.data.data.title}"`);
      } else {
        console.log('‚ùå Employee Thai: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } catch (e) {
      console.log('‚ùå Employee Thai API Error:', e.message);
    }
    
    // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    console.log('\nüìã STEP 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢');
    console.log('===================================');
    
    const finalCheck = await pool.query(`
      SELECT user_type, language, title 
      FROM policy_versions 
      WHERE is_active = true
      ORDER BY user_type, language
    `);
    
    console.log('\nPolicies ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
    finalCheck.rows.forEach(p => {
      console.log(`‚úì ${p.user_type} | ${p.language} | ${p.title}`);
    });
    
    console.log('\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!');
    console.log('\nüìå ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log('==============');
    console.log('1. Customer (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤):');
    console.log('   - ‡πÄ‡∏Ç‡πâ‡∏≤: http://localhost:3003/consent/select-language');
    console.log('   - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ó‡∏¢ ‚Üí ‡πÅ‡∏™‡∏î‡∏á "‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)"');
    console.log('   - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‚Üí ‡πÅ‡∏™‡∏î‡∏á "Privacy Policy (English)"');
    console.log('');
    console.log('2. UserType ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡∏£‡∏á):');
    console.log('   - Employee: http://localhost:3003/consent/employee?lang=th');
    console.log('   - Partner: http://localhost:3003/consent/partner?lang=th');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    console.error(error.stack);
  } finally {
    await pool.end();
  }
}

checkAndFixEverything();
