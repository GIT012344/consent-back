const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'postgres',
  password: '4321',
  database: 'consent'
});

async function verifyAndFixLanguage() {
  const client = await pool.connect();
  
  try {
    console.log('üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n');
    console.log('='.repeat(80));
    
    // 1. ‡∏î‡∏π policy ‡∏ó‡∏µ‡πà‡∏°‡∏µ title "‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏á"
    console.log('1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Policy "‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏á":\n');
    const checkPolicy = await client.query(`
      SELECT id, user_type, language, title, created_at
      FROM policy_versions
      WHERE title = '‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏á' OR title LIKE '%‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö%'
      ORDER BY created_at DESC
    `);
    
    if (checkPolicy.rows.length > 0) {
      checkPolicy.rows.forEach(p => {
        console.log(`ID ${p.id}: ${p.user_type}/${p.language}`);
        console.log(`Title: "${p.title}"`);
        console.log(`Language ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: "${p.language}"`);
        
        if (p.language !== 'th' && p.language !== 'en') {
          console.log(`‚ö†Ô∏è Language format ‡∏ú‡∏¥‡∏î! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...`);
          
          // ‡∏ñ‡πâ‡∏≤ title ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏ï‡πà language ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'th'
          if (p.title.match(/[\u0E00-\u0E7F]/)) {
            client.query(`
              UPDATE policy_versions 
              SET language = 'th' 
              WHERE id = $1
            `, [p.id]);
            console.log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô 'th' ‡πÅ‡∏•‡πâ‡∏ß`);
          }
        }
        console.log('');
      });
    } else {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö policy "‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏á"');
    }
    
    // 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç policies ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ language format ‡∏ú‡∏¥‡∏î
    console.log('2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Language Format ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:\n');
    
    // ‡πÅ‡∏Å‡πâ Thai policies
    const fixThai = await client.query(`
      UPDATE policy_versions 
      SET language = 'th'
      WHERE language IN ('th-TH', '‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢', 'Thai', '‡πÑ‡∏ó‡∏¢')
      RETURNING id, title
    `);
    
    if (fixThai.rows.length > 0) {
      console.log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ${fixThai.rows.length} Thai policies ‡πÄ‡∏õ‡πá‡∏ô 'th'`);
    }
    
    // ‡πÅ‡∏Å‡πâ English policies  
    const fixEng = await client.query(`
      UPDATE policy_versions 
      SET language = 'en'
      WHERE language IN ('en-US', 'English', 'Eng', '‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©')
      RETURNING id, title
    `);
    
    if (fixEng.rows.length > 0) {
      console.log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ${fixEng.rows.length} English policies ‡πÄ‡∏õ‡πá‡∏ô 'en'`);
    }
    
    // 3. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\n3. Policies ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:\n');
    const final = await client.query(`
      SELECT user_type, language, title
      FROM policy_versions
      WHERE is_active = true
      ORDER BY created_at DESC
      LIMIT 10
    `);
    
    final.rows.forEach(p => {
      const icon = p.language === 'th' ? 'üáπüá≠' : p.language === 'en' ? 'üá¨üáß' : '‚ùì';
      const langText = p.language === 'th' ? '‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢' : p.language === 'en' ? 'English' : p.language;
      console.log(`${icon} ${p.user_type}/${p.language} (${langText}): "${p.title}"`);
      
      // ‡πÅ‡∏™‡∏î‡∏á link ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const langParam = p.language === 'th' ? 'th' : 'en';
      if (p.user_type === 'customer') {
        console.log(`   Link: /consent/select-language`);
      } else {
        console.log(`   Link: /consent/${p.user_type}?lang=${langParam}`);
      }
    });
    
    console.log('\n' + '='.repeat(80));
    console.log('\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
    console.log('\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:');
    console.log('- Policy ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‚Üí language = "th" ‚Üí link ‡∏à‡∏ö‡∏î‡πâ‡∏ß‡∏¢ ?lang=th');
    console.log('- Policy English ‚Üí language = "en" ‚Üí link ‡∏à‡∏ö‡∏î‡πâ‡∏ß‡∏¢ ?lang=en');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

verifyAndFixLanguage();
