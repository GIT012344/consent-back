const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'consent',
  user: 'postgres',
  password: '4321'
});

async function fixCreatePolicy() {
  try {
    console.log('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Policy...\n');
    
    // 1. ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
    const current = await pool.query(`
      SELECT id, version, user_type, language, title
      FROM policy_versions
      ORDER BY id DESC
    `);
    
    current.rows.forEach(p => {
      console.log(`[${p.version}] userType:"${p.user_type}" | ${p.language} | ${p.title}`);
    });
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô customer ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const allCustomer = current.rows.every(p => p.user_type === 'customer');
    if (allCustomer && current.rows.length > 0) {
      console.log('\n‚ùå ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡∏ó‡∏∏‡∏Å policy ‡πÄ‡∏õ‡πá‡∏ô customer!');
      
      // 3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏° title ‡∏´‡∏£‡∏∑‡∏≠ version
      console.log('\nüîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç userType:');
      
      for (const policy of current.rows) {
        let newUserType = policy.user_type;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å title
        if (policy.title.includes('‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô') || policy.title.toLowerCase().includes('employee')) {
          newUserType = 'employee';
        } else if (policy.title.includes('‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£') || policy.title.toLowerCase().includes('partner')) {
          newUserType = 'partner';
        } else if (policy.title.includes('‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢') || policy.title.toLowerCase().includes('vendor')) {
          newUserType = 'vendor';
        } else if (policy.version === '003') {
          // Version 003 ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô employee
          newUserType = 'employee';
        } else if (policy.version === '001' || policy.version === '002') {
          // Version 001, 002 ‡πÄ‡∏õ‡πá‡∏ô customer
          newUserType = 'customer';
        }
        
        if (newUserType !== policy.user_type) {
          await pool.query(
            'UPDATE policy_versions SET user_type = $1 WHERE id = $2',
            [newUserType, policy.id]
          );
          console.log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç [${policy.version}] ‡∏à‡∏≤‡∏Å customer -> ${newUserType}`);
        }
      }
    }
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\nüìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    const fixed = await pool.query(`
      SELECT version, user_type, language, title
      FROM policy_versions
      ORDER BY version
    `);
    
    fixed.rows.forEach(p => {
      let link = '';
      if (p.user_type === 'customer') {
        link = '/consent/select-language';
      } else {
        const lang = p.language === 'th-TH' ? 'th' : 'en';
        link = `/consent/${p.user_type}?lang=${lang}`;
      }
      console.log(`[${p.version}] ${p.user_type} | Link: ${link}`);
    });
    
    console.log('\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à!');
    console.log('\nüìå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:');
    console.log('1. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó Backend');
    console.log('2. Clear Browser Cache (Ctrl+Shift+R)');
    console.log('3. ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤ Policy Management');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await pool.end();
  }
}

fixCreatePolicy();
