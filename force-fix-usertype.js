const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'consent',
  user: 'postgres',
  password: '4321'
});

async function forceFixUserType() {
  try {
    console.log('üîß ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç UserType...\n');
    
    // 1. ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    const before = await pool.query(`
      SELECT id, version, user_type, language, title
      FROM policy_versions
      WHERE version IN ('001', '002', '003')
      ORDER BY version
    `);
    
    before.rows.forEach(p => {
      console.log(`${p.version}: userType="${p.user_type}" | ${p.language}`);
    });
    
    // 2. ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç version 003 ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô employee
    console.log('\nüîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 003 ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô employee ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
    const update003 = await pool.query(`
      UPDATE policy_versions 
      SET user_type = 'employee'
      WHERE version = '003'
      RETURNING *
    `);
    
    if (update003.rows.length > 0) {
      console.log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 003 -> employee (${update003.rows[0].title})`);
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 001 ‡πÅ‡∏•‡∏∞ 002 ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô customer
    await pool.query(`
      UPDATE policy_versions 
      SET user_type = 'customer'
      WHERE version IN ('001', '002')
    `);
    console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 001, 002 -> customer');
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\nüìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    const after = await pool.query(`
      SELECT version, user_type, language, title
      FROM policy_versions
      WHERE version IN ('001', '002', '003')
      ORDER BY version
    `);
    
    console.log('\nVersion | UserType | Link');
    console.log('--------|----------|-----');
    after.rows.forEach(p => {
      let link = '';
      if (p.user_type === 'customer') {
        link = 'http://localhost:3003/consent/select-language';
      } else if (p.user_type === 'employee') {
        const lang = p.language === 'th-TH' ? 'th' : 'en';
        link = `http://localhost:3003/consent/employee?lang=${lang}`;
      }
      console.log(`${p.version}    | ${p.user_type.padEnd(8)} | ${link}`);
    });
    
    console.log('\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('\n‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ó‡∏±‡∏ô‡∏ó‡∏µ:');
    console.log('1. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó Backend (Ctrl+C ‡πÅ‡∏•‡πâ‡∏ß node server.js)');
    console.log('2. Hard Refresh ‡∏´‡∏ô‡πâ‡∏≤ Policy Management (Ctrl+Shift+R)');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await pool.end();
  }
}

forceFixUserType();
