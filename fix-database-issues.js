const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'postgres',
  password: '4321',
  database: 'consent'
});

async function fixDatabaseIssues() {
  const client = await pool.connect();
  
  try {
    console.log('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Database\n');
    console.log('='.repeat(80));
    
    // 1. ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå title ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å consent_records
    console.log('1. ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå title:\n');
    try {
      await client.query(`ALTER TABLE consent_records DROP COLUMN IF EXISTS title`);
      console.log('‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå title ‡πÅ‡∏•‡πâ‡∏ß');
    } catch (err) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå title ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
    }
    
    // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå browser ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    console.log('\n2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå browser:\n');
    const checkBrowser = await client.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'consent_records' 
      AND column_name = 'browser'
    `);
    
    if (checkBrowser.rows.length === 0) {
      await client.query(`
        ALTER TABLE consent_records 
        ADD COLUMN browser VARCHAR(255) DEFAULT 'Unknown'
      `);
      console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå browser ‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      console.log('‚úÖ ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå browser ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
    }
    
    // 3. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó browser ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô null
    console.log('\n3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç browser ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô null:\n');
    const updateBrowser = await client.query(`
      UPDATE consent_records 
      SET browser = 'Unknown'
      WHERE browser IS NULL
      RETURNING id
    `);
    console.log(`‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ${updateBrowser.rowCount} records ‡∏ó‡∏µ‡πà browser ‡πÄ‡∏õ‡πá‡∏ô null`);
    
    // 4. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó policy_title ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Policy Management
    console.log('\n4. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó policy_title ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô:\n');
    
    // Join ‡∏Å‡∏±‡∏ö policy_versions ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á title ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const updateTitle = await client.query(`
      UPDATE consent_records cr
      SET policy_title = pv.title
      FROM policy_versions pv
      WHERE cr.user_type = pv.user_type
      AND cr.consent_language = pv.language
      AND pv.is_active = true
      AND (cr.policy_title = 'Privacy Policy' 
           OR cr.policy_title = 'Consent Policy'
           OR cr.policy_title IS NULL)
      RETURNING cr.id, cr.name_surname, pv.title
    `);
    
    if (updateTitle.rows.length > 0) {
      console.log(`‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ${updateTitle.rows.length} records`);
      updateTitle.rows.forEach(r => {
        console.log(`   - ${r.name_surname}: "${r.title}"`);
      });
    }
    
    // 5. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\n5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:\n');
    const result = await client.query(`
      SELECT id, name_surname, user_type, policy_title, browser
      FROM consent_records
      WHERE is_active = true
      ORDER BY created_date DESC
      LIMIT 5
    `);
    
    result.rows.forEach(r => {
      console.log(`ID ${r.id}: ${r.name_surname}`);
      console.log(`   User Type: ${r.user_type}`);
      console.log(`   Policy Title: "${r.policy_title || 'N/A'}"`);
      console.log(`   Browser: "${r.browser || 'Unknown'}"`);
      console.log('');
    });
    
    console.log('='.repeat(80));
    console.log('\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
    console.log('- ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå title ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß');
    console.log('- Browser ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null ‡πÅ‡∏•‡πâ‡∏ß (‡πÅ‡∏™‡∏î‡∏á "Unknown" ‡πÅ‡∏ó‡∏ô)');
    console.log('- Policy title ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Policy Management');
    console.log('- ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Consent Records Management ‡πÅ‡∏•‡πâ‡∏ß');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

fixDatabaseIssues();
