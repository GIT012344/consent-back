const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'consent',
  user: 'postgres',
  password: '4321'
});

async function createMultipleVersions() {
  try {
    console.log('üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á Policy ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UserType ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô...\n');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Policy ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ 2 ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
    const policies = [
      {
        version: 'EMP-TH-001',
        title: '‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 001',
        content: '<h2>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô V.001</h2><p>‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 001</p><ul><li>‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 001</li><li>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 001</li></ul>',
        language: 'th-TH',
        user_type: 'employee',
        is_active: true  // ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 001 active
      },
      {
        version: 'EMP-TH-002',
        title: '‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 002',
        content: '<h2>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô V.002</h2><p>‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 002 (‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏ß‡πà‡∏≤)</p><ul><li>‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 002 ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó</li><li>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 002 ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á</li></ul>',
        language: 'th-TH',
        user_type: 'employee',
        is_active: false  // ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 002 inactive (‡∏™‡∏≥‡∏£‡∏≠‡∏á)
      },
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° Customer ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢
      {
        version: 'CUST-TH-001',
        title: '‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 001',
        content: '<h2>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ V.001</h2><p>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 001</p>',
        language: 'th-TH',
        user_type: 'customer',
        is_active: true
      },
      {
        version: 'CUST-TH-002',
        title: '‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 002',
        content: '<h2>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ V.002</h2><p>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 002 (‡∏ó‡∏î‡∏™‡∏≠‡∏ö)</p>',
        language: 'th-TH',
        user_type: 'customer',
        is_active: false
      }
    ];
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (optional)
    // await pool.query('DELETE FROM policy_versions');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á policies ‡πÉ‡∏´‡∏°‡πà
    for (const policy of policies) {
      const result = await pool.query(
        `INSERT INTO policy_versions 
         (version, title, content, language, user_type, is_active, created_at) 
         VALUES ($1, $2, $3, $4, $5, $6, NOW())
         RETURNING id`,
        [policy.version, policy.title, policy.content, policy.language, policy.user_type, policy.is_active]
      );
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á: ${policy.title} (ID: ${result.rows[0].id}) - ${policy.is_active ? 'ACTIVE' : 'INACTIVE'}`);
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
    console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ Policy ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:');
    const summary = await pool.query(`
      SELECT user_type, language, COUNT(*) as count,
             SUM(CASE WHEN is_active THEN 1 ELSE 0 END) as active_count
      FROM policy_versions
      GROUP BY user_type, language
      ORDER BY user_type, language
    `);
    
    console.log('\nUserType | Language | Total | Active');
    console.log('---------|----------|-------|-------');
    summary.rows.forEach(row => {
      console.log(`${row.user_type.padEnd(8)} | ${row.language.padEnd(8)} | ${row.count.toString().padEnd(5)} | ${row.active_count}`);
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á Policy ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    console.log('\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Policy ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
    const allPolicies = await pool.query(`
      SELECT id, version, title, user_type, language, is_active
      FROM policy_versions
      ORDER BY user_type, language, version
    `);
    
    allPolicies.rows.forEach(p => {
      const status = p.is_active ? '‚úÖ ACTIVE' : '‚è∏Ô∏è INACTIVE';
      console.log(`[${p.id}] ${p.version} - ${p.title} (${p.user_type}/${p.language}) ${status}`);
    });
    
    console.log('\n‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:');
    console.log('1. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ Policy ‡∏ó‡∏µ‡πà is_active = true');
    console.log('2. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ active ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö userType/language ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î');
    console.log('3. ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ toggle active/inactive ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Policy Management');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await pool.end();
  }
}

createMultipleVersions();
