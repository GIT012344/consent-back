const { Pool } = require('pg');
const axios = require('axios');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'postgres',
  password: '4321',
  database: 'consent'
});

async function completeDebugAndFix() {
  const client = await pool.connect();
  
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö\n');
    console.log('='.repeat(80));
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('1Ô∏è‚É£ DATABASE CHECK:\n');
    
    const dbCheck = await client.query(`
      SELECT id, user_type, language, title, 
             LEFT(content, 200) as content_preview,
             is_active, created_at, updated_at
      FROM policy_versions
      WHERE is_active = true
      ORDER BY created_at DESC
    `);
    
    console.log(`‡∏û‡∏ö ${dbCheck.rows.length} policies ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:`);
    
    if (dbCheck.rows.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ policy ‡πÄ‡∏•‡∏¢ - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...\n');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á policy ‡πÉ‡∏´‡∏°‡πà
      await client.query(`
        INSERT INTO policy_versions (
          title, user_type, language, version, content, is_active
        ) VALUES (
          '001',
          'customer',
          'th',
          '1.0.0',
          '<h1>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h1>
<p>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏´‡∏≤‡∏°</p>
<p>‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡∏≤‡∏ú‡∏≤</p>
<p>‡∏≠‡∏≥‡∏û‡∏•‡∏™‡∏ô‡∏∏‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≠‡∏°‡∏û‡πÉ‡∏à</p>
<p>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH')}</p>',
          true
        )
      `);
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö customer/th ‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      dbCheck.rows.forEach(p => {
        console.log(`\n${p.user_type}/${p.language}: "${p.title}" (ID: ${p.id})`);
        console.log(`Active: ${p.is_active}`);
        console.log(`Content: ${p.content_preview}...`);
      });
    }
    
    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API endpoint
    console.log('\n2Ô∏è‚É£ API CHECK:\n');
    
    const apiUrl = 'http://localhost:3000/api/simple-policy/active?userType=customer&language=th';
    console.log(`Testing: ${apiUrl}`);
    
    try {
      const response = await axios.get(apiUrl);
      console.log(`Status: ${response.status}`);
      
      if (response.data.success && response.data.data) {
        console.log('‚úÖ API ‡∏û‡∏ö Policy:');
        console.log(`  Title: "${response.data.data.title}"`);
        console.log(`  Content: ${response.data.data.content?.substring(0, 100)}...`);
      } else {
        console.log('‚ùå API ‡πÑ‡∏°‡πà‡∏û‡∏ö Policy');
        console.log(`  Message: ${response.data.message}`);
      }
    } catch (err) {
      console.log('‚ùå API Error:', err.message);
      console.log('‚ö†Ô∏è Backend ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
    }
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Frontend code
    console.log('\n3Ô∏è‚É£ FRONTEND CHECK:\n');
    console.log('Frontend (ConsentFlowPage.js) ‡∏Ñ‡∏ß‡∏£:');
    console.log('- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API: /api/simple-policy/active');
    console.log('- ‡∏™‡πà‡∏á params: userType=customer&language=th');
    console.log('- ‡∏£‡∏±‡∏ö response.data.data.content');
    console.log('- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡πà‡∏≤‡∏ô dangerouslySetInnerHTML');
    
    // 4. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    console.log('\n4Ô∏è‚É£ FIXING ISSUES:\n');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö customer/th ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const checkPolicy = await client.query(`
      SELECT COUNT(*) as count 
      FROM policy_versions 
      WHERE user_type = 'customer' AND language = 'th' AND is_active = true
    `);
    
    if (checkPolicy.rows[0].count === '0') {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö customer/th - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');
      
      await client.query(`
        INSERT INTO policy_versions (
          title, user_type, language, version, content, is_active
        ) VALUES (
          '001',
          'customer',
          'th',
          '1.0.0',
          '<h1>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h1><p>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà Admin ‡∏™‡∏£‡πâ‡∏≤‡∏á</p>',
          true
        )
      `);
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á policy ‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      console.log('‚úÖ ‡∏°‡∏µ policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö customer/th ‡πÅ‡∏•‡πâ‡∏ß');
    }
    
    // 5. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    console.log('\n' + '='.repeat(80));
    console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:\n');
    
    const final = await client.query(`
      SELECT user_type, language, title, is_active
      FROM policy_versions
      WHERE is_active = true
      ORDER BY user_type, language
    `);
    
    console.log('Policies ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ:');
    final.rows.forEach(p => {
      console.log(`‚Ä¢ ${p.user_type}/${p.language}: "${p.title}" (Active: ${p.is_active})`);
    });
    
    console.log('\nüìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:');
    console.log('1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ backend ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: npm run dev');
    console.log('2. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:5000/consent/customer?lang=th');
    console.log('3. ‡∏Å‡∏î Ctrl+F5 ‡πÄ‡∏û‡∏∑‡πà‡∏≠ clear cache');
    console.log('4. ‡∏î‡∏π Console (F12) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

completeDebugAndFix();
