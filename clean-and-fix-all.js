const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'consent',
  user: 'postgres',
  password: '4321'
});

async function cleanAndFixAll() {
  try {
    console.log('üßπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ï‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...\n');
    
    // 1. ‡∏•‡∏ö policies ‡∏ó‡∏µ‡πà userType ‡∏ú‡∏¥‡∏î (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
    console.log('üóëÔ∏è ‡∏•‡∏ö policies ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î:');
    
    // ‡∏•‡∏ö‡∏ó‡∏µ‡πà userType ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    const deleteWrong = await pool.query(`
      DELETE FROM policy_versions 
      WHERE user_type IN ('‡∏î‡∏≥', '‡∏î‡∏≥‡πÑ‡∏î‡πÑ‡∏≥‡∏î‡πÑ‡∏≥‡∏î‡πÑ‡∏î‡πÑ‡∏î', 'customer ')
         OR user_type LIKE '%‡∏î‡∏≥%'
         OR user_type LIKE '%‡πÑ%'
         OR LENGTH(user_type) > 20
         OR title = ''
         OR title IS NULL
         OR title LIKE '%‡∏î‡∏≥%'
      RETURNING id, user_type, title
    `);
    
    if (deleteWrong.rows.length > 0) {
      deleteWrong.rows.forEach(p => {
        console.log(`  ‚ùå ‡∏•‡∏ö ID:${p.id} userType:"${p.user_type}" title:"${p.title}"`);
      });
    }
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö policies ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    console.log('\n‚úÖ Policies ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:');
    const remaining = await pool.query(`
      SELECT id, version, user_type, language, title
      FROM policy_versions
      WHERE version IN ('001', '002', '003', '004')
      ORDER BY version
    `);
    
    remaining.rows.forEach(p => {
      console.log(`[${p.version}] ${p.user_type} | ${p.title}`);
    });
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ userType ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    console.log('\nüîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç UserType:');
    
    // 001, 002 = customer
    await pool.query(`
      UPDATE policy_versions 
      SET user_type = 'customer'
      WHERE version IN ('001', '002')
    `);
    console.log('‚úÖ 001, 002 -> customer');
    
    // 003 = employee
    await pool.query(`
      UPDATE policy_versions 
      SET user_type = 'employee'
      WHERE version = '003'
    `);
    console.log('‚úÖ 003 -> employee');
    
    // 004 = partner
    await pool.query(`
      UPDATE policy_versions 
      SET user_type = 'partner'
      WHERE version = '004'
    `);
    console.log('‚úÖ 004 -> partner');
    
    // 4. ‡∏•‡∏ö policies ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ version 001-004
    const deleteExtra = await pool.query(`
      DELETE FROM policy_versions 
      WHERE version NOT IN ('001', '002', '003', '004')
      RETURNING id, version
    `);
    
    if (deleteExtra.rows.length > 0) {
      console.log(`\nüóëÔ∏è ‡∏•‡∏ö policies ‡πÄ‡∏Å‡∏¥‡∏ô: ${deleteExtra.rows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    }
    
    // 5. ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    console.log('\nüìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:');
    const final = await pool.query(`
      SELECT version, user_type, language, title
      FROM policy_versions
      ORDER BY version
    `);
    
    console.log('\nVersion | UserType | Language | Title | Link');
    console.log('--------|----------|----------|-------|-----');
    final.rows.forEach(p => {
      let link = '';
      if (p.user_type === 'customer') {
        link = 'http://localhost:3003/consent/select-language';
      } else if (p.user_type === 'employee') {
        link = 'http://localhost:3003/consent/employee?lang=th';
      } else if (p.user_type === 'partner') {
        link = 'http://localhost:3003/consent/partner?lang=th';
      }
      console.log(`${p.version}    | ${p.user_type.padEnd(8)} | ${p.language} | ${p.title.substring(0, 20)}... | ${link}`);
    });
    
    console.log('\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß');
    console.log('\n‚ö†Ô∏è ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó Backend ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤ Policy Management');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await pool.end();
  }
}

cleanAndFixAll();
