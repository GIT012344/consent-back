const { Pool } = require('pg');
const axios = require('axios');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'postgres',
  password: '4321',
  database: 'consent'
});

async function debugContentFlow() {
  const client = await pool.connect();
  
  try {
    console.log('üîç DEBUG: ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å Admin ‚Üí Database ‚Üí API ‚Üí Frontend\n');
    console.log('='.repeat(80));
    
    // 1. ‡∏î‡∏π‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('1Ô∏è‚É£ DATABASE - ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n');
    const dbContent = await client.query(`
      SELECT id, user_type, language, title, content, created_at, updated_at
      FROM policy_versions
      WHERE is_active = true 
        AND user_type = 'customer' 
        AND language = 'th'
      ORDER BY updated_at DESC NULLS LAST, created_at DESC
      LIMIT 1
    `);
    
    if (dbContent.rows.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö customer/th');
      console.log('\nüí° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...');
      
      await client.query(`
        INSERT INTO policy_versions (
          title, user_type, language, version, content, is_active
        ) VALUES (
          'Test Policy',
          'customer',
          'th',
          '1.0',
          '<h1>TEST CONTENT FROM ADMIN</h1><p>‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà Admin ‡∏û‡∏¥‡∏°‡∏û‡πå</p>',
          true
        )
      `);
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á test policy ‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      const p = dbContent.rows[0];
      console.log(`ID: ${p.id}`);
      console.log(`Title: "${p.title}"`);
      console.log(`User Type: ${p.user_type}`);
      console.log(`Language: ${p.language}`);
      console.log(`Created: ${new Date(p.created_at).toLocaleString('th-TH')}`);
      if (p.updated_at) {
        console.log(`Updated: ${new Date(p.updated_at).toLocaleString('th-TH')}`);
      }
      console.log('\nContent ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
      console.log('-'.repeat(60));
      console.log(p.content);
      console.log('-'.repeat(60));
    }
    
    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API endpoint
    console.log('\n2Ô∏è‚É£ API - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API endpoint:\n');
    console.log('URL: http://localhost:3000/api/simple-policy/active?userType=customer&language=th');
    
    try {
      const apiResponse = await axios.get(
        'http://localhost:3000/api/simple-policy/active?userType=customer&language=th'
      );
      
      if (apiResponse.data.success && apiResponse.data.data) {
        const data = apiResponse.data.data;
        console.log('‚úÖ API Response:');
        console.log(`Title: "${data.title}"`);
        console.log(`User Type: ${data.user_type}`);
        console.log(`Language: ${data.language}`);
        console.log('\nContent ‡∏ó‡∏µ‡πà API ‡∏™‡πà‡∏á:');
        console.log('-'.repeat(60));
        console.log(data.content);
        console.log('-'.repeat(60));
      } else {
        console.log('‚ùå API ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤');
      }
    } catch (err) {
      console.log(`‚ùå API Error: ${err.message}`);
      console.log('‚ö†Ô∏è Backend ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô: npm run dev');
    }
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Frontend
    console.log('\n3Ô∏è‚É£ FRONTEND - ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà Frontend ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:\n');
    console.log('Frontend (ConsentFlowPage.js) ‡∏à‡∏∞:');
    console.log('1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API: /api/simple-policy/active?userType=customer&language=th');
    console.log('2. ‡∏£‡∏±‡∏ö response.data.data.content');
    console.log('3. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡πà‡∏≤‡∏ô dangerouslySetInnerHTML');
    console.log('\n‡∏ñ‡πâ‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞:');
    console.log('- Browser cache ‡πÄ‡∏Å‡πà‡∏≤ ‚Üí ‡∏Å‡∏î Ctrl+F5');
    console.log('- API ‡∏™‡πà‡∏á content ‡∏ú‡∏¥‡∏î ‚Üí ‡∏î‡∏π console (F12)');
    console.log('- Language/UserType ‡πÑ‡∏°‡πà match');
    
    // 4. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    console.log('\n4Ô∏è‚É£ UPDATE - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà:\n');
    
    const newContent = `<h1>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà Admin ‡∏™‡∏£‡πâ‡∏≤‡∏á</h1>
<p>‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH')}</p>
<h2>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h2>
<p>‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà Admin ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Create Policy</p>
<ul>
  <li>‡∏Ç‡πâ‡∏≠ 1: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</li>
  <li>‡∏Ç‡πâ‡∏≠ 2: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</li>
  <li>‡∏Ç‡πâ‡∏≠ 3: ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Å‡πà‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°</li>
</ul>`;
    
    await client.query(`
      UPDATE policy_versions 
      SET content = $1, updated_at = NOW()
      WHERE user_type = 'customer' AND language = 'th' AND is_active = true
    `, [newContent]);
    
    console.log('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß');
    console.log('\n‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà:');
    console.log('-'.repeat(60));
    console.log(newContent);
    console.log('-'.repeat(60));
    
    console.log('\n' + '='.repeat(80));
    console.log('\n‚úÖ ‡∏™‡∏£‡∏∏‡∏õ:\n');
    console.log('1. Database ‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß');
    console.log('2. API endpoint: /api/simple-policy/active?userType=customer&language=th');
    console.log('3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà: http://localhost:5000/consent/customer?lang=th');
    console.log('4. ‡∏Å‡∏î Ctrl+F5 ‡πÄ‡∏û‡∏∑‡πà‡∏≠ clear cache');
    console.log('\n‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà:');
    console.log('- Restart backend: Ctrl+C ‡πÅ‡∏•‡πâ‡∏ß npm run dev');
    console.log('- ‡∏î‡∏π Console (F12) ‡∏ß‡πà‡∏≤‡∏°‡∏µ error ‡πÑ‡∏´‡∏°');
    console.log('- ‡∏î‡∏π Network tab ‡∏ß‡πà‡∏≤ API response ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

debugContentFlow();
