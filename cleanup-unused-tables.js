const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || '4321',
  database: process.env.DB_NAME || 'consent'
});

async function cleanupUnusedTables() {
  const client = await pool.connect();
  
  try {
    console.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö tables ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...\n');
    
    // Tables ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
    const KEEP_TABLES = [
      'consent_records',     // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• consent ‡∏´‡∏•‡∏±‡∏Å
      'consent_history'      // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ consent
    ];
    
    // Tables ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡∏•‡∏ö
    const REMOVE_TABLES = [
      'admin_users',              // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö admin login
      'audiences',                // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ - ‡πÉ‡∏ä‡πâ user_type ‡πÉ‡∏ô consent_records ‡πÅ‡∏ó‡∏ô
      'audit_logs',               // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö audit
      'consent_form_fields',      // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ - ‡πÉ‡∏ä‡πâ form ‡πÅ‡∏ö‡∏ö fixed
      'consent_titles',           // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ - ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö title ‡πÅ‡∏•‡πâ‡∏ß
      'consent_version_targeting',// ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö version targeting
      'consent_versions',         // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ - ‡πÉ‡∏ä‡πâ version ‡πÉ‡∏ô consent_records
      'consents',                 // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ - ‡πÉ‡∏ä‡πâ consent_records ‡πÅ‡∏ó‡∏ô
      'form_templates',           // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ - ‡πÉ‡∏ä‡πâ form ‡πÅ‡∏ö‡∏ö fixed
      'policies',                 // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö policy management
      'policy_kinds',             // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ
      'policy_version_audiences', // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ
      'policy_versions',          // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ
      'tenants',                  // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö multi-tenant
      'user_consents',            // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ - ‡πÉ‡∏ä‡πâ consent_records ‡πÅ‡∏ó‡∏ô
      'user_types',               // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ - ‡πÉ‡∏ä‡πâ user_type field ‡πÅ‡∏ó‡∏ô
      'users'                     // ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ - ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÅ‡∏¢‡∏Å
    ];
    
    console.log('üìã Tables ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ:');
    KEEP_TABLES.forEach(table => console.log(`   ‚úÖ ${table}`));
    
    console.log('\nüìã Tables ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö:');
    REMOVE_TABLES.forEach(table => console.log(`   ‚ùå ${table}`));
    
    console.log('\nüóëÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö tables...\n');
    
    for (const table of REMOVE_TABLES) {
      try {
        await client.query(`DROP TABLE IF EXISTS ${table} CASCADE`);
        console.log(`   ‚úÖ ‡∏•‡∏ö ${table} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      } catch (err) {
        console.log(`   ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö ${table}: ${err.message}`);
      }
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á tables ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    console.log('\nüìä Tables ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    const remainingTables = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `);
    
    remainingTables.rows.forEach(row => {
      console.log(`   - ${row.table_name}`);
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ consent_records
    console.log('\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô consent_records:');
    const stats = await client.query(`
      SELECT 
        COUNT(*) as total,
        COUNT(DISTINCT user_type) as user_types,
        COUNT(DISTINCT consent_language) as languages,
        COUNT(DISTINCT consent_version) as versions
      FROM consent_records
    `);
    
    console.log(`   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô records ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.rows[0].total}`);
    console.log(`   - User types: ${stats.rows[0].user_types} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó`);
    console.log(`   - ‡∏†‡∏≤‡∏©‡∏≤: ${stats.rows[0].languages} ‡∏†‡∏≤‡∏©‡∏≤`);
    console.log(`   - Versions: ${stats.rows[0].versions} ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô`);
    
    // ‡πÅ‡∏™‡∏î‡∏á user types ‡∏ó‡∏µ‡πà‡∏°‡∏µ
    const userTypes = await client.query(`
      SELECT DISTINCT user_type, COUNT(*) as count
      FROM consent_records
      GROUP BY user_type
      ORDER BY count DESC
    `);
    
    if (userTypes.rows.length > 0) {
      console.log('\n   User Types:');
      userTypes.rows.forEach(row => {
        console.log(`     - ${row.user_type || 'null'}: ${row.count} records`);
      });
    }
    
    console.log('\n‚úÖ ‡∏•‡∏ö tables ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
    console.log('üíæ ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á 2 tables: consent_records ‡πÅ‡∏•‡∏∞ consent_history');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    pool.end();
  }
}

// ‡∏£‡∏±‡∏ô cleanup
cleanupUnusedTables().catch(console.error);
