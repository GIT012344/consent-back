const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'postgres',
  password: '4321',
  database: 'consent'
});

async function ensureContentWorks() {
  const client = await pool.connect();
  
  try {
    console.log('üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n');
    console.log('='.repeat(80));
    
    // 1. ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ policy ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
    const existing = await client.query(`
      SELECT id, user_type, language, title, 
             content,
             created_at, updated_at
      FROM policy_versions
      WHERE is_active = true
      ORDER BY created_at DESC
    `);
    
    console.log(`‡∏û‡∏ö ${existing.rows.length} policies:\n`);
    
    if (existing.rows.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ policy ‡πÄ‡∏•‡∏¢ - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...\n');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
      await client.query(`
        INSERT INTO policy_versions (
          title, user_type, language, version, content, is_active
        ) VALUES 
        ('Policy 001', 'customer', 'th', '1.0', '<h1>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏ó‡∏¢</h1><p>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà Admin ‡∏™‡∏£‡πâ‡∏≤‡∏á</p>', true),
        ('Policy 002', 'customer', 'en', '1.0', '<h1>Customer Policy English</h1><p>Content created by Admin</p>', true),
        ('Policy 003', 'employee', 'th', '1.0', '<h1>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</h1><p>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</p>', true)
      `);
      
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á policies ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      existing.rows.forEach((p, i) => {
        console.log(`${i+1}. ${p.user_type}/${p.language}: "${p.title}"`);
        console.log(`   ID: ${p.id}`);
        console.log(`   ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ${p.content.substring(0, 100)}...`);
        console.log(`   Created: ${new Date(p.created_at).toLocaleString('th-TH')}`);
        console.log('');
      });
    }
    
    console.log('='.repeat(80));
    console.log('\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!\n');
    console.log('üìù ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Policy:');
    console.log('1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:5000/admin/create-policy');
    console.log('2. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    console.log('   - Title: ‡∏ä‡∏∑‡πà‡∏≠ policy');
    console.log('   - User Type: customer/employee/partner');
    console.log('   - Language: th-TH ‡∏´‡∏£‡∏∑‡∏≠ en-US');
    console.log('   - Content: ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á');
    console.log('3. ‡∏Å‡∏î Save');
    console.log('\n‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤ Title ‡∏ã‡πâ‡∏≥ = ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°');
    console.log('\nüîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•:');
    console.log('‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏ó‡∏¢: http://localhost:5000/consent/customer?lang=th');
    console.log('‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©: http://localhost:5000/consent/customer?lang=en');
    console.log('‚Ä¢ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏ó‡∏¢: http://localhost:5000/consent/employee?lang=th');
    console.log('\nüí° ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á = ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà Admin ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô Content');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

ensureContentWorks();
