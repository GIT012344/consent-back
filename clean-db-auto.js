const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'consent',
  user: 'postgres',
  password: '4321'
});

async function cleanDatabase() {
  try {
    console.log('=== CLEANING DATABASE ===\n');
    
    // 1. ‡∏î‡∏π tables ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const tables = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    console.log('üìã Current tables:');
    tables.rows.forEach(t => console.log('  -', t.table_name));
    
    // 2. Tables ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡∏•‡∏ö
    const tablesToDrop = [
      'admin_users',
      'audiences', 
      'audit_logs',
      'consent_form_fields',
      'consent_titles',
      'consent_versions',
      'consent_version_targeting',
      'form_templates',
      'policies',
      'policy_kinds',
      'tenants',
      'user_consents',
      'users'
    ];
    
    console.log('\n‚ùå Dropping unused tables:');
    for (const table of tablesToDrop) {
      const exists = tables.rows.some(t => t.table_name === table);
      if (exists) {
        console.log(`  - Dropping ${table}...`);
        await pool.query(`DROP TABLE IF EXISTS ${table} CASCADE`);
      }
    }
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö columns ‡πÉ‡∏ô consent_records
    console.log('\nüìä Checking consent_records columns...');
    const columns = await pool.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'consent_records'
      ORDER BY ordinal_position
    `);
    
    console.log('Current columns:');
    columns.rows.forEach(c => console.log(`  - ${c.column_name} (${c.data_type})`));
    
    // 4. ‡∏•‡∏ö columns ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ
    const columnsToRemove = [
      'title',           // ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö name_surname
      'browser',         // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      'email',           // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      'phone',           // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      'consent_version_id', // ‡πÉ‡∏ä‡πâ consent_version ‡πÅ‡∏ó‡∏ô
      'updated_at'       // ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö created_date
    ];
    
    console.log('\nüîß Removing duplicate/unused columns...');
    for (const col of columnsToRemove) {
      const hasColumn = columns.rows.some(c => c.column_name === col);
      if (hasColumn) {
        try {
          console.log(`  - Dropping column: ${col}`);
          await pool.query(`ALTER TABLE consent_records DROP COLUMN IF EXISTS ${col}`);
        } catch (err) {
          console.log(`    ‚ö†Ô∏è Could not drop ${col}: ${err.message}`);
        }
      }
    }
    
    // 5. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    console.log('\n‚úÖ CLEANUP COMPLETE!\n');
    
    // ‡πÅ‡∏™‡∏î‡∏á tables ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    const finalTables = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    console.log('üìã Remaining tables:');
    finalTables.rows.forEach(t => console.log('  -', t.table_name));
    
    // ‡πÅ‡∏™‡∏î‡∏á columns ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô consent_records
    const finalColumns = await pool.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'consent_records'
      ORDER BY ordinal_position
    `);
    
    console.log('\nüìä Final consent_records structure:');
    finalColumns.rows.forEach(c => console.log(`  - ${c.column_name} (${c.data_type})`));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const count = await pool.query('SELECT COUNT(*) FROM consent_records');
    console.log(`\nüìà Total records: ${count.rows[0].count}`);
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await pool.end();
  }
}

// ‡∏£‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
cleanDatabase();
