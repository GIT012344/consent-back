const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'consent',
  user: 'postgres',
  password: '4321'
});

async function checkAndFixDb() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...\n');
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    const current = await pool.query(`
      SELECT id, user_type, language, title, version
      FROM policy_versions
      ORDER BY id DESC
    `);
    
    console.log('‡∏û‡∏ö', current.rows.length, 'policies:');
    current.rows.forEach(p => {
      console.log(`[${p.id}] userType: "${p.user_type}" | ${p.language} | ${p.title}`);
    });
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ policy ‡∏ó‡∏µ‡πà userType ‡∏ú‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const wrongCustomer = current.rows.filter(p => 
      p.user_type === 'customer' && 
      (p.title.includes('‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô') || p.title.includes('‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£') || p.title.includes('‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢'))
    );
    
    if (wrongCustomer.length > 0) {
      console.log('\n‚ùå ‡∏û‡∏ö policies ‡∏ó‡∏µ‡πà userType ‡∏ú‡∏¥‡∏î:');
      wrongCustomer.forEach(p => {
        console.log(`   [${p.id}] ${p.title} -> userType ‡πÄ‡∏õ‡πá‡∏ô customer (‡∏ú‡∏¥‡∏î)`);
      });
      
      // 3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç userType ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î
      console.log('\nüîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç userType...');
      
      for (const p of wrongCustomer) {
        let correctUserType = 'customer';
        
        if (p.title.includes('‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô')) {
          correctUserType = 'employee';
        } else if (p.title.includes('‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£')) {
          correctUserType = 'partner';
        } else if (p.title.includes('‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢')) {
          correctUserType = 'vendor';
        } else if (p.title.includes('‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤')) {
          correctUserType = 'contractor';
        }
        
        if (correctUserType !== 'customer') {
          await pool.query(
            'UPDATE policy_versions SET user_type = $1 WHERE id = $2',
            [correctUserType, p.id]
          );
          console.log(`   ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç [${p.id}] ‡πÄ‡∏õ‡πá‡∏ô ${correctUserType}`);
        }
      }
    }
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    console.log('\nüìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    const fixed = await pool.query(`
      SELECT id, user_type, language, title
      FROM policy_versions
      ORDER BY user_type, language
    `);
    
    console.log('\nPolicies ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
    fixed.rows.forEach(p => {
      let link = p.user_type === 'customer' 
        ? '/consent/select-language'
        : `/consent/${p.user_type}?lang=${p.language === 'th-TH' ? 'th' : 'en'}`;
      console.log(`[${p.id}] ${p.user_type.padEnd(10)} | ${p.language} | ${link}`);
    });
    
    // 5. ‡∏™‡∏£‡∏∏‡∏õ userTypes ‡∏ó‡∏µ‡πà‡∏°‡∏µ
    const userTypes = [...new Set(fixed.rows.map(p => p.user_type))];
    console.log('\n‚úÖ UserTypes ‡∏ó‡∏µ‡πà‡∏°‡∏µ:', userTypes.join(', '));
    
    console.log('\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤ Policy Management');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await pool.end();
  }
}

checkAndFixDb();
