const { Pool } = require('pg');
const axios = require('axios');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'consent',
  user: 'postgres',
  password: '4321'
});

async function testCompleteSystem() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...\n');
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö policies ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('üìã Policies ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    console.log('========================');
    const allPolicies = await pool.query(`
      SELECT id, user_type, language, title, version, is_active,
             LEFT(content, 100) as content_preview
      FROM policy_versions 
      ORDER BY user_type, language
    `);
    
    allPolicies.rows.forEach(p => {
      console.log(`[${p.id}] ${p.user_type} - ${p.language} - "${p.title}" v${p.version}`);
      console.log(`     Active: ${p.is_active}`);
      console.log(`     Content: ${p.content_preview.substring(0, 50)}...`);
    });
    
    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API endpoints
    console.log('\nüåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Endpoints:');
    console.log('========================');
    
    // Test customer Thai
    try {
      const res = await axios.get('http://localhost:3000/api/simple-policy/active?userType=customer&language=th-TH');
      console.log('‚úÖ Customer Thai:', res.data.data ? res.data.data.title : 'NOT FOUND');
    } catch (e) {
      console.log('‚ùå Customer Thai: ERROR', e.message);
    }
    
    // Test customer English
    try {
      const res = await axios.get('http://localhost:3000/api/simple-policy/active?userType=customer&language=en-US');
      console.log('‚úÖ Customer English:', res.data.data ? res.data.data.title : 'NOT FOUND');
    } catch (e) {
      console.log('‚ùå Customer English: ERROR', e.message);
    }
    
    // Test employee
    try {
      const res = await axios.get('http://localhost:3000/api/simple-policy/active?userType=employee&language=th-TH');
      console.log('‚úÖ Employee Thai:', res.data.data ? res.data.data.title : 'NOT FOUND');
    } catch (e) {
      console.log('‚ùå Employee Thai: ERROR', e.message);
    }
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å userType
    console.log('\nüîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Policy ‡πÉ‡∏´‡∏°‡πà:');
    console.log('================================');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á test policy
    const testPolicy = {
      version: '2.0.0',
      title: 'Test Partner Policy',
      content: '<p>Test content for partner</p>',
      language: 'th-TH',
      user_type: 'partner',  // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô partner ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà customer
      effective_date: new Date().toISOString(),
      expiry_date: null
    };
    
    try {
      const createRes = await axios.post('http://localhost:3000/api/simple-policy', testPolicy);
      if (createRes.data.success) {
        console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Policy ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å userType ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const checkRes = await pool.query(
          'SELECT user_type FROM policy_versions WHERE id = $1',
          [createRes.data.data.id]
        );
        
        if (checkRes.rows[0].user_type === 'partner') {
          console.log('‚úÖ UserType ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: partner');
        } else {
          console.log(`‚ùå UserType ‡∏ú‡∏¥‡∏î! ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô: ${checkRes.rows[0].user_type}`);
        }
        
        // ‡∏•‡∏ö test policy
        await pool.query('DELETE FROM policy_versions WHERE id = $1', [createRes.data.data.id]);
      }
    } catch (e) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Policy:', e.message);
    }
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö content formatting
    console.log('\nüìù ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Content Formatting:');
    console.log('================================');
    
    const testContent = `<p>‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</p>
<p>‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á</p>
<ul>
<li>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà 1</li>
<li>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà 2</li>
</ul>`;
    
    console.log('Content ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á:');
    console.log('- ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å');
    console.log('- ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)');
    console.log('- ‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà 1');
    console.log('- ‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà 2');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await pool.end();
  }
}

testCompleteSystem();
