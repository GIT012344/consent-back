const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'consent',
  user: 'postgres',
  password: '4321'
});

async function fixUserTypeFromTitle() {
  try {
    console.log('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç UserType ‡∏ï‡∏≤‡∏° Title...\n');
    
    // 1. ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    const before = await pool.query(`
      SELECT id, version, user_type, language, title
      FROM policy_versions
      ORDER BY version
    `);
    
    before.rows.forEach(p => {
      console.log(`[${p.version}] userType:"${p.user_type}" | ${p.title}`);
    });
    
    // 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏° title
    console.log('\nüîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç UserType:');
    
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 003 - ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô -> employee
    await pool.query(`
      UPDATE policy_versions 
      SET user_type = 'employee'
      WHERE version = '003' OR title LIKE '%‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô%'
    `);
    console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô -> employee');
    
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 004 - ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£ -> partner  
    await pool.query(`
      UPDATE policy_versions 
      SET user_type = 'partner'
      WHERE version = '004' OR title LIKE '%‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£%'
    `);
    console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£ -> partner');
    
    // Customer ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô customer (001, 002)
    await pool.query(`
      UPDATE policy_versions 
      SET user_type = 'customer'
      WHERE version IN ('001', '002') OR 
            title LIKE '%‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤%' OR 
            title LIKE '%Customer%'
    `);
    console.log('‚úÖ ‡∏Ñ‡∏á Customer policies');
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\nüìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    const after = await pool.query(`
      SELECT version, user_type, language, title
      FROM policy_versions
      ORDER BY version
    `);
    
    console.log('\nVersion | UserType | Title | Link');
    console.log('--------|----------|-------|-----');
    after.rows.forEach(p => {
      let link = '';
      if (p.user_type === 'customer') {
        link = '/consent/select-language';
      } else {
        const lang = p.language === 'th-TH' ? 'th' : 'en';
        link = `/consent/${p.user_type}?lang=${lang}`;
      }
      console.log(`${p.version}    | ${p.user_type.padEnd(8)} | ${p.title.substring(0, 20)}... | ${link}`);
    });
    
    console.log('\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('\n‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ó‡∏±‡∏ô‡∏ó‡∏µ:');
    console.log('1. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó Backend (Ctrl+C ‡πÅ‡∏•‡πâ‡∏ß node server.js)');
    console.log('2. Hard Refresh (Ctrl+Shift+R) ‡∏´‡∏ô‡πâ‡∏≤ Policy Management');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await pool.end();
  }
}

fixUserTypeFromTitle();
