const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'consent',
  user: 'postgres',
  password: '4321'
});

async function fixTable() {
  const client = await pool.connect();
  
  try {
    console.log('üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á consent_records...\n');
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏° transaction
    await client.query('BEGIN');
    
    // 1. ‡∏•‡∏ö columns ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    console.log('‚ùå ‡∏•‡∏ö columns ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô:');
    const dropColumns = [
      'uid',           // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡πÉ‡∏ä‡πâ consent_id ‡πÅ‡∏ó‡∏ô
      'first_name',    // ‡∏ã‡πâ‡∏≥ ‡πÉ‡∏ä‡πâ name_surname
      'last_name',     // ‡∏ã‡πâ‡∏≥ ‡πÉ‡∏ä‡πâ name_surname  
      'id_type',       // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      'id_number',     // ‡∏ã‡πâ‡∏≥ ‡πÉ‡∏ä‡πâ id_passport
      'snapshot_html', // ‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
      'created_at'     // ‡∏ã‡πâ‡∏≥ ‡πÉ‡∏ä‡πâ created_date
    ];
    
    for (const col of dropColumns) {
      try {
        await client.query(`ALTER TABLE consent_records DROP COLUMN IF EXISTS ${col} CASCADE`);
        console.log(`  ‚úì ‡∏•‡∏ö ${col}`);
      } catch (err) {
        console.log(`  ‚ö†Ô∏è ${col}: ‡∏•‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ`);
      }
    }
    
    // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î
    console.log('\n‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:');
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ column ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á error
    const addColumns = [
      ['consent_id', 'VARCHAR(50)'],
      ['consent_type', 'VARCHAR(50) DEFAULT \'customer\''],
      ['policy_title', 'VARCHAR(255)'],
      ['user_agent', 'TEXT'],
      ['created_time', 'TIME DEFAULT CURRENT_TIME']
    ];
    
    for (const [name, type] of addColumns) {
      try {
        await client.query(`ALTER TABLE consent_records ADD COLUMN IF NOT EXISTS ${name} ${type}`);
        console.log(`  ‚úì ‡πÄ‡∏û‡∏¥‡πà‡∏° ${name}`);
      } catch (err) {
        console.log(`  ‚ö†Ô∏è ${name}: ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
      }
    }
    
    // 3. ‡∏õ‡∏£‡∏±‡∏ö data type ‡∏Ç‡∏≠‡∏á browser_info
    console.log('\nüîß ‡∏õ‡∏£‡∏±‡∏ö data types:');
    try {
      await client.query('ALTER TABLE consent_records ALTER COLUMN browser_info TYPE TEXT');
      console.log('  ‚úì browser_info ‡πÄ‡∏õ‡πá‡∏ô TEXT');
    } catch (err) {
      console.log('  ‚ö†Ô∏è browser_info: ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ');
    }
    
    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á unique constraint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö consent_id
    try {
      await client.query('ALTER TABLE consent_records ADD CONSTRAINT unique_consent_id UNIQUE (consent_id)');
      console.log('  ‚úì ‡πÄ‡∏û‡∏¥‡πà‡∏° unique constraint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö consent_id');
    } catch (err) {
      if (err.code === '42710') {
        console.log('  ‚ö†Ô∏è unique constraint ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
      }
    }
    
    // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á indexes
    console.log('\nüìá ‡∏™‡∏£‡πâ‡∏≤‡∏á indexes:');
    const indexes = [
      ['idx_consent_records_consent_id', 'consent_id'],
      ['idx_consent_records_id_passport', 'id_passport'],
      ['idx_consent_records_created_date', 'created_date']
    ];
    
    for (const [name, column] of indexes) {
      try {
        await client.query(`CREATE INDEX IF NOT EXISTS ${name} ON consent_records(${column})`);
        console.log(`  ‚úì ${name}`);
      } catch (err) {
        console.log(`  ‚ö†Ô∏è ${name}: ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
      }
    }
    
    // Commit transaction
    await client.query('COMMIT');
    
    // 6. ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    const result = await client.query(`
      SELECT column_name, data_type, character_maximum_length
      FROM information_schema.columns
      WHERE table_name = 'consent_records'
      ORDER BY ordinal_position
    `);
    
    console.log('\nüìã ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î:');
    console.log('=====================================');
    result.rows.forEach((col, i) => {
      const len = col.character_maximum_length ? `(${col.character_maximum_length})` : '';
      console.log(`${i+1}. ${col.column_name}: ${col.data_type}${len}`);
    });
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô records
    const count = await client.query('SELECT COUNT(*) FROM consent_records');
    console.log(`\nüìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${count.rows[0].count} records`);
    
    console.log('\n‚ú® ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('\nüí° ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ columns:');
    console.log('- consent_id: ‡∏£‡∏´‡∏±‡∏™ consent ‡∏ó‡∏µ‡πà generate ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (CNSxxxxx)');
    console.log('- id_passport: ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô/‡∏û‡∏≤‡∏™‡∏õ‡∏≠‡∏£‡πå‡∏ï');
    console.log('- name_surname: ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•');
    console.log('- ‡πÑ‡∏°‡πà‡∏°‡∏µ uid, first_name, last_name ‡πÅ‡∏•‡πâ‡∏ß (‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô)');
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    pool.end();
  }
}

fixTable().catch(console.error);
