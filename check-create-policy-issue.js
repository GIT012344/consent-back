const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'postgres',
  password: '4321',
  database: 'consent'
});

async function checkCreatePolicyIssue() {
  const client = await pool.connect();
  
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Policy\n');
    console.log('='.repeat(50));
    
    // 1. ‡∏î‡∏π policies ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('\nüìä Policies ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    const allPolicies = await client.query(`
      SELECT id, user_type, language, title, is_active, created_at
      FROM policy_versions
      ORDER BY created_at DESC
      LIMIT 10
    `);
    
    if (allPolicies.rows.length === 0) {
      console.log('   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö policy ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } else {
      allPolicies.rows.forEach(p => {
        const status = p.is_active ? '‚úÖ Active' : '‚ùå Inactive';
        console.log(`   ID ${p.id}: ${p.user_type}/${p.language} = "${p.title}" ${status}`);
        console.log(`      Created: ${new Date(p.created_at).toLocaleString('th-TH')}`);
      });
    }
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö duplicate titles
    console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Duplicate Titles:');
    const duplicates = await client.query(`
      SELECT title, COUNT(*) as count, 
             STRING_AGG(CONCAT(user_type, '/', language), ', ') as combinations
      FROM policy_versions
      WHERE title IN ('001', '002', '003', '01')
      GROUP BY title
      HAVING COUNT(*) > 1
    `);
    
    if (duplicates.rows.length > 0) {
      console.log('   ‚ö†Ô∏è ‡∏û‡∏ö title ‡∏ã‡πâ‡∏≥:');
      duplicates.rows.forEach(d => {
        console.log(`   "${d.title}" ‡∏°‡∏µ ${d.count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ${d.combinations}`);
      });
    } else {
      console.log('   ‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö title ‡∏ã‡πâ‡∏≥');
    }
    
    // 3. ‡∏•‡∏ö policies ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà active
    console.log('\nüóëÔ∏è ‡∏•‡∏ö policies ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ:');
    
    // Keep only the latest active policy for each user_type/language combination
    await client.query(`
      DELETE FROM policy_versions
      WHERE id NOT IN (
        SELECT DISTINCT ON (user_type, language) id
        FROM policy_versions
        WHERE is_active = true
        ORDER BY user_type, language, created_at DESC
      )
    `);
    
    console.log('   ‚úÖ ‡∏•‡∏ö policies ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß');
    
    // 4. ‡πÅ‡∏™‡∏î‡∏á policies ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    console.log('\nüìã Policies ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà:');
    const activePolicies = await client.query(`
      SELECT user_type, language, title
      FROM policy_versions
      WHERE is_active = true
      ORDER BY user_type, language
    `);
    
    activePolicies.rows.forEach(p => {
      console.log(`   ‚úÖ ${p.user_type}/${p.language}: "${p.title}"`);
    });
    
    console.log('\n' + '='.repeat(50));
    console.log('üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:');
    console.log('1. ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á policy ‡πÉ‡∏´‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô: http://localhost:5000/admin/create-policy');
    console.log('2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Backend ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà port 3000');
    console.log('3. ‡∏î‡∏π console ‡πÉ‡∏ô browser ‡∏ß‡πà‡∏≤‡∏°‡∏µ error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

checkCreatePolicyIssue();
