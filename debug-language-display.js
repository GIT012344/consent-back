const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'postgres',
  password: '4321',
  database: 'consent'
});

async function debugLanguageDisplay() {
  const client = await pool.connect();
  
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏©‡∏≤\n');
    console.log('='.repeat(80));
    
    // 1. ‡∏î‡∏π policies ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    console.log('1. Policies ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n');
    const policies = await client.query(`
      SELECT id, user_type, language, title, created_at
      FROM policy_versions
      WHERE is_active = true
      ORDER BY created_at DESC
    `);
    
    policies.rows.forEach(p => {
      const langDisplay = p.language === 'th' ? 'üáπüá≠ ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢' : 
                         p.language === 'en' ? 'English' :
                         p.language === 'th-TH' ? 'üáπüá≠ ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (th-TH)' :
                         p.language === 'en-US' ? 'English (en-US)' : p.language;
      
      console.log(`ID ${p.id}: ${p.user_type}/${p.language} = "${p.title}"`);
      console.log(`   Language: ${langDisplay}`);
      console.log(`   Created: ${new Date(p.created_at).toLocaleString('th-TH')}`);
      console.log('');
    });
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö policy ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    console.log('2. Policy ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:\n');
    const latest = await client.query(`
      SELECT * FROM policy_versions
      ORDER BY created_at DESC
      LIMIT 1
    `);
    
    if (latest.rows.length > 0) {
      const p = latest.rows[0];
      console.log(`ID: ${p.id}`);
      console.log(`Title: ${p.title}`);
      console.log(`User Type: ${p.user_type}`);
      console.log(`Language in DB: "${p.language}"`);
      console.log(`Expected: "th" for Thai, "en" for English`);
      
      if (p.language !== 'th' && p.language !== 'en') {
        console.log('\n‚ö†Ô∏è Language format ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!');
        console.log(`   Found: "${p.language}"`);
        console.log('   Should be: "th" or "en"');
      }
    }
    
    console.log('\n' + '='.repeat(80));
    console.log('\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:\n');
    console.log('‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏∑‡∏≠ language ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô format ‡∏ú‡∏¥‡∏î');
    console.log('- ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô: "th" ‡∏´‡∏£‡∏∑‡∏≠ "en"');
    console.log('- ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô: "th-TH", "en-US", "‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢", "English"');
    console.log('\n‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Policy ‡πÉ‡∏´‡∏°‡πà:');
    console.log('- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "üáπüá≠ ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢" ‚Üí ‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô "th"');
    console.log('- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "English" ‚Üí ‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô "en"');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

debugLanguageDisplay();
