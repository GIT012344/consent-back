const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'postgres',
  password: '4321',
  database: 'consent'
});

async function fixLanguageMismatch() {
  const client = await pool.connect();
  
  try {
    console.log('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Language Format Mismatch\n');
    console.log('='.repeat(80));
    
    // 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç language format ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô th ‡πÅ‡∏ó‡∏ô th-TH
    console.log('1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Language Format:\n');
    
    await client.query(`
      UPDATE policy_versions 
      SET language = 'th'
      WHERE language = 'th-TH' OR language = '‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢'
    `);
    console.log('‚úÖ ‡πÅ‡∏õ‡∏•‡∏á th-TH ‚Üí th');
    
    await client.query(`
      UPDATE policy_versions 
      SET language = 'en'
      WHERE language = 'en-US' OR language = 'English'
    `);
    console.log('‚úÖ ‡πÅ‡∏õ‡∏•‡∏á en-US ‚Üí en');
    
    // 2. ‡∏•‡∏ö duplicates - ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    console.log('\n2. ‡∏•‡∏ö Duplicates:\n');
    
    await client.query(`
      DELETE FROM policy_versions
      WHERE id NOT IN (
        SELECT DISTINCT ON (user_type, language) id
        FROM policy_versions
        WHERE is_active = true
        ORDER BY user_type, language, created_at DESC
      )
    `);
    console.log('‚úÖ ‡∏•‡∏ö duplicates ‡πÅ‡∏•‡πâ‡∏ß');
    
    // 3. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    console.log('\n3. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:\n');
    
    const updateResult = await client.query(`
      UPDATE policy_versions 
      SET content = $1,
          title = '001',
          version = '1.0.0',
          updated_at = NOW()
      WHERE user_type = 'customer' AND language = 'th'
      RETURNING id
    `, [`<h1>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h1>
<p>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏´‡∏≤‡∏°</p>
<p>‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡∏≤‡∏ú‡∏≤</p>
<p>‡∏≠‡∏≥‡∏û‡∏•‡∏™‡∏ô‡∏∏‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≠‡∏°‡∏û‡πÉ‡∏à</p>`]);
    
    if (updateResult.rows.length > 0) {
      console.log(`‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Policy ID ${updateResult.rows[0].id}`);
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      const insertResult = await client.query(`
        INSERT INTO policy_versions (
          title, user_type, language, version, content, is_active
        ) VALUES (
          '001', 'customer', 'th', '1.0.0', $1, true
        ) RETURNING id
      `, [`<h1>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h1>
<p>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏´‡∏≤‡∏°</p>
<p>‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡∏≤‡∏ú‡∏≤</p>
<p>‡∏≠‡∏≥‡∏û‡∏•‡∏™‡∏ô‡∏∏‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≠‡∏°‡∏û‡πÉ‡∏à</p>`]);
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Policy ID ${insertResult.rows[0].id}`);
    }
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\n4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:\n');
    
    const final = await client.query(`
      SELECT id, user_type, language, title, is_active
      FROM policy_versions
      WHERE is_active = true
      ORDER BY user_type, language
    `);
    
    console.log('Policies ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ:');
    final.rows.forEach(p => {
      console.log(`‚Ä¢ ID ${p.id}: ${p.user_type}/${p.language} = "${p.title}"`);
    });
    
    console.log('\n' + '='.repeat(80));
    console.log('\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!\n');
    console.log('‡∏ó‡∏î‡∏™‡∏≠‡∏ö: http://localhost:5000/consent/customer?lang=th');
    console.log('‡∏Å‡∏î Ctrl+F5 ‡πÄ‡∏û‡∏∑‡πà‡∏≠ refresh');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

fixLanguageMismatch();
