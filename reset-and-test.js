const { Pool } = require('pg');
const axios = require('axios');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'consent',
  user: 'postgres',
  password: '4321'
});

async function resetAndTest() {
  try {
    console.log('üîÑ RESET ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...\n');
    
    // 1. ‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    await pool.query('DROP TABLE IF EXISTS policy_versions CASCADE');
    await pool.query(`
      CREATE TABLE policy_versions (
        id SERIAL PRIMARY KEY,
        version VARCHAR(50),
        title VARCHAR(255),
        content TEXT,
        language VARCHAR(10),
        user_type VARCHAR(50),
        effective_date TIMESTAMP,
        expiry_date TIMESTAMP,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà');
    
    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Customer Policies (2 ‡∏†‡∏≤‡∏©‡∏≤)
    console.log('\nüìù ‡∏™‡∏£‡πâ‡∏≤‡∏á Customer Policies:');
    
    // Customer Thai
    const customerThaiResult = await pool.query(
      `INSERT INTO policy_versions 
       (version, title, content, language, user_type, is_active, effective_date) 
       VALUES ($1, $2, $3, $4, $5, true, NOW())
       RETURNING id`,
      [
        '1.0.0',
        '‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏ó‡∏¢)',
        '<h2>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h2><p>‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</p><ul><li>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</li><li>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</li></ul>',
        'th-TH',
        'customer'
      ]
    );
    console.log(`‚úÖ Customer Thai - ID: ${customerThaiResult.rows[0].id}`);
    
    // Customer English
    const customerEnResult = await pool.query(
      `INSERT INTO policy_versions 
       (version, title, content, language, user_type, is_active, effective_date) 
       VALUES ($1, $2, $3, $4, $5, true, NOW())
       RETURNING id`,
      [
        '1.0.0',
        'Customer Policy (English)',
        '<h2>Privacy Policy</h2><p>This is English content for customers</p><ul><li>Personal Data</li><li>Usage</li></ul>',
        'en-US',
        'customer'
      ]
    );
    console.log(`‚úÖ Customer English - ID: ${customerEnResult.rows[0].id}`);
    
    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Employee Policy
    const employeeResult = await pool.query(
      `INSERT INTO policy_versions 
       (version, title, content, language, user_type, is_active, effective_date) 
       VALUES ($1, $2, $3, $4, $5, true, NOW())
       RETURNING id`,
      [
        '1.0.0',
        '‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
        '<h2>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</h2><p>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</p>',
        'th-TH',
        'employee'
      ]
    );
    console.log(`‚úÖ Employee - ID: ${employeeResult.rows[0].id}`);
    
    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Partner Policy
    const partnerResult = await pool.query(
      `INSERT INTO policy_versions 
       (version, title, content, language, user_type, is_active, effective_date) 
       VALUES ($1, $2, $3, $4, $5, true, NOW())
       RETURNING id`,
      [
        '1.0.0',
        '‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£',
        '<h2>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£</h2><p>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£</p>',
        'th-TH',
        'partner'
      ]
    );
    console.log(`‚úÖ Partner - ID: ${partnerResult.rows[0].id}`);
    
    // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('\nüìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    const checkData = await pool.query(`
      SELECT id, user_type, language, title 
      FROM policy_versions 
      ORDER BY user_type, language
    `);
    
    checkData.rows.forEach(row => {
      console.log(`[${row.id}] ${row.user_type} | ${row.language} | ${row.title}`);
    });
    
    // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API
    console.log('\nüåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API:');
    
    // Test Customer Thai
    try {
      const res = await axios.get('http://localhost:3000/api/simple-policy/active?userType=customer&language=th-TH');
      if (res.data.success) {
        console.log(`‚úÖ API Customer Thai: "${res.data.data.title}"`);
      }
    } catch (e) {
      console.log(`‚ùå API Customer Thai Error: ${e.message}`);
    }
    
    // Test Customer English
    try {
      const res = await axios.get('http://localhost:3000/api/simple-policy/active?userType=customer&language=en-US');
      if (res.data.success) {
        console.log(`‚úÖ API Customer English: "${res.data.data.title}"`);
      }
    } catch (e) {
      console.log(`‚ùå API Customer English Error: ${e.message}`);
    }
    
    // Test Employee
    try {
      const res = await axios.get('http://localhost:3000/api/simple-policy/active?userType=employee&language=th-TH');
      if (res.data.success) {
        console.log(`‚úÖ API Employee: "${res.data.data.title}"`);
      }
    } catch (e) {
      console.log(`‚ùå API Employee Error: ${e.message}`);
    }
    
    console.log('\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('\nüìå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log('1. Customer: http://localhost:3003/consent/select-language');
    console.log('   - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ó‡∏¢ ‚Üí "‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏ó‡∏¢)"');
    console.log('   - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‚Üí "Customer Policy (English)"');
    console.log('2. Employee: http://localhost:3003/consent/employee?lang=th');
    console.log('3. Partner: http://localhost:3003/consent/partner?lang=th');
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await pool.end();
  }
}

resetAndTest();
