const { pool } = require('./config/database');

async function checkTableStructure() {
  console.log('=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á consent_records ===\n');
  
  try {
    // ‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const result = await pool.query(`
      SELECT 
        column_name,
        data_type,
        character_maximum_length,
        is_nullable,
        column_default
      FROM information_schema.columns
      WHERE table_name = 'consent_records'
      ORDER BY ordinal_position
    `);
    
    console.log('üìã Columns ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á consent_records:');
    console.log('=====================================');
    result.rows.forEach((col, index) => {
      const length = col.character_maximum_length ? `(${col.character_maximum_length})` : '';
      const nullable = col.is_nullable === 'YES' ? 'NULL' : 'NOT NULL';
      const defaultVal = col.column_default ? ` DEFAULT ${col.column_default}` : '';
      console.log(`${index + 1}. ${col.column_name}: ${col.data_type}${length} ${nullable}${defaultVal}`);
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö columns ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    console.log('\nüîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå columns:');
    console.log('====================');
    
    const columns = result.rows.map(r => r.column_name);
    
    // Columns ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ
    const requiredColumns = [
      'id',                  // Primary key
      'consent_id',          // Unique consent ID
      'title',               // ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
      'name_surname',        // ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
      'id_passport',         // ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£/‡∏û‡∏≤‡∏™‡∏õ‡∏≠‡∏£‡πå‡∏ï
      'email',               // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      'phone',               // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
      'user_type',           // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (customer/employee/partner)
      'consent_type',        // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó consent
      'consent_language',    // ‡∏†‡∏≤‡∏©‡∏≤ (th/en)
      'consent_version',     // ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô policy
      'consent_version_id',  // ID ‡∏Ç‡∏≠‡∏á version
      'policy_title',        // ‡∏ä‡∏∑‡πà‡∏≠ policy
      'ip_address',          // IP address
      'browser_info',        // Browser
      'user_agent',          // User agent string
      'is_active',           // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ active
      'created_date',        // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
      'created_time',        // ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á
      'updated_at'           // ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    ];
    
    // Columns ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô/‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
    const unnecessaryColumns = [
      'uid',                 // ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö consent_id
      'first_name',          // ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö name_surname
      'last_name',           // ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö name_surname
      'id_type',             // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      'id_number',           // ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö id_passport
      'snapshot_html',       // ‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      'created_at'           // ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö created_date
    ];
    
    console.log('\n‚úÖ Columns ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ:');
    requiredColumns.forEach(col => {
      if (columns.includes(col)) {
        console.log(`  ‚úì ${col}`);
      } else {
        console.log(`  ‚úó ${col} (‡πÑ‡∏°‡πà‡∏°‡∏µ)`);
      }
    });
    
    console.log('\n‚ùå Columns ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏•‡∏ö:');
    columns.forEach(col => {
      if (unnecessaryColumns.includes(col)) {
        console.log(`  - ${col} (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô/‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô)`);
      }
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    const sampleData = await pool.query('SELECT * FROM consent_records LIMIT 1');
    if (sampleData.rows.length > 0) {
      console.log('\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:');
      console.log('================');
      const sample = sampleData.rows[0];
      Object.keys(sample).forEach(key => {
        const value = sample[key];
        if (value !== null && value !== '') {
          console.log(`${key}: ${typeof value === 'string' && value.length > 50 ? value.substring(0, 50) + '...' : value}`);
        }
      });
    }
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    process.exit(1);
  }
}

checkTableStructure();
